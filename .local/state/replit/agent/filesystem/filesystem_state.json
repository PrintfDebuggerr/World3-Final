{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Wordle Duo - Turkish Multiplayer Word Game\n\n## Overview\n\nWordle Duo is a Turkish multiplayer word game that allows two players to play Wordle-style word guessing games together. The application features two distinct game modes: Sequential Mode (where players take turns on the same board) and Duel Mode (where players compete on separate boards simultaneously). Built with modern web technologies, it provides real-time multiplayer functionality with an elegant dark-themed UI featuring Turkish flag-inspired color accents.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe frontend is built using React with TypeScript, leveraging Vite as the build tool. The application follows a component-based architecture with:\n\n- **State Management**: Uses Zustand for global state management with subscriptions for real-time updates\n- **UI Framework**: Custom component library built on top of Radix UI primitives with Tailwind CSS for styling\n- **Animation System**: Framer Motion for smooth transitions and interactive animations\n- **Routing**: Single-page application with programmatic navigation through game states\n\n### Game State Management\nThe application manages complex game states through a centralized store pattern:\n\n- **Game Phases**: Menu, waiting, playing, and finished states\n- **Player Management**: Real-time player status tracking and avatar assignment\n- **Room Management**: Dynamic room creation with 6-character alphanumeric codes\n- **Turn-based Logic**: Sequential turn management for collaborative gameplay\n\n### Real-time Communication\nWebSocket-based communication enables live multiplayer functionality:\n\n- **Room Synchronization**: Real-time updates of game state across connected players\n- **Player Presence**: Live connection status and disconnection handling\n- **Game Progress**: Instant propagation of moves and game events\n\n### Backend Architecture\nExpress.js server with WebSocket integration provides:\n\n- **RESTful API**: Health checks and room information endpoints\n- **WebSocket Server**: Real-time bidirectional communication using ws library\n- **In-memory Storage**: Game rooms and player connections stored in memory for fast access\n- **Room Management**: Dynamic room creation, joining, and cleanup\n\n### UI/UX Design System\nTurkish-themed design with glassmorphism effects:\n\n- **Color Palette**: Turkish flag colors (red/white) with neon accents for interactive elements\n- **Typography**: Inter font family for clean, modern readability\n- **Responsive Design**: Mobile-first approach with adaptive layouts\n- **Animation Library**: Custom CSS animations for letter flips, pulses, and confetti effects\n\n### Game Logic Implementation\nCore Wordle mechanics adapted for multiplayer:\n\n- **Word Validation**: Turkish 5-letter word dictionary with comprehensive validation\n- **Letter Status System**: Color-coded feedback (correct, present, absent) with keyboard state tracking\n- **Game Modes**: \n  - Sequential: Shared board with alternating turns\n  - Duel: Separate boards with simultaneous play and color-only opponent feedback\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React 18**: Frontend framework with hooks and concurrent features\n- **TypeScript**: Type safety and enhanced developer experience\n- **Vite**: Fast build tool with hot module replacement\n- **Express.js**: Backend web framework for API and WebSocket server\n\n### UI and Styling\n- **Tailwind CSS**: Utility-first CSS framework for rapid styling\n- **Radix UI**: Headless UI primitives for accessible components\n- **Framer Motion**: Animation library for smooth transitions and effects\n- **Lucide React**: Icon library for consistent iconography\n\n### Real-time Communication\n- **WebSocket (ws)**: Server-side WebSocket implementation for real-time features\n- **Native WebSocket API**: Client-side real-time communication\n\n### State Management and Data\n- **Zustand**: Lightweight state management with TypeScript support\n- **TanStack Query**: Server state management and caching (configured but minimal usage)\n\n### Development and Build Tools\n- **ESBuild**: Fast bundling for production builds\n- **PostCSS**: CSS processing with Autoprefixer\n- **TSX**: TypeScript execution for development server\n\n### Database Configuration\n- **Drizzle ORM**: Database toolkit configured for PostgreSQL\n- **Neon Database**: Serverless PostgreSQL integration ready for scaling\n\n### Optional Integrations\n- **Firebase**: Mock implementation included for potential real-time database features\n- **Three.js**: 3D graphics libraries imported but not actively used in current implementation\n\nThe application is architected to scale from the current in-memory implementation to persistent database storage and distributed systems as needed.","size_bytes":4814},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path, { dirname } from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\nimport { fileURLToPath } from \"url\";\nimport glsl from \"vite-plugin-glsl\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    glsl(), // Add GLSL shader support\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  // Add support for large models and audio files\n  assetsInclude: [\"**/*.gltf\", \"**/*.glb\", \"**/*.mp3\", \"**/*.ogg\", \"**/*.wav\"],\n});\n","size_bytes":896},"attached_assets/wordle_duo_design_1755730047764.md":{"content":"# 🎨 WORDLE DUO - TASARIM DOKÜMANI\n\n## Genel Tema\n- **Modern Dark Mode** ağırlıklı tasarım (açık mod seçeneği ile)\n- **Minimalist** ama **etkileşimli** arayüz\n- **Neon aksentler** ve **yumuşak animasyonlar**\n- **Türkiye'ye özel** renk paleti (kırmızı-beyaz aksentler)\n\n## Ana Renk Paleti\n- **Arka Plan:** Koyu gri gradyan (`#0F172A` → `#1E293B`)\n- **Kartlar:** Buzlu cam efekti (`rgba(255,255,255,0.1)`)\n- **Aksentler:** \n  - Türk Kırmızısı (`#E11D48`) - Ana butonlar\n  - Altın Sarısı (`#F59E0B`) - Sarı harfler\n  - Yeşil (`#10B981`) - Doğru harfler\n  - Neon Mavi (`#06B6D4`) - Hover efektleri\n\n## Sayfa Akışı ve Düzenleri\n\n### 1. Ana Menü Sayfası\n- Merkezi logo (WORDLE DUO - Turkish flag renkleri)\n- **Glassmorphism** kartlar:\n  - \"ODA OLUŞTUR\" (büyük, kırmızı)\n  - \"ODAYA KATIL\" (büyük, mavi)\n\n### 2. Oda Oluşturma Akışı\n\n#### 2a. Mod Seçimi (Oda oluşturanlar için)\nİki büyük kart:\n- **SIRAYLA MODU** - İkon: 🔄\n  - *\"Aynı panelde sırayla tahmin yapın\"*\n- **DÜELLO MODU** - İkon: ⚔️\n  - *\"Ayrı panellerde yarışın, sadece renkleri görün\"*\n\n#### 2b. Oda Kodu Ekranı\n- Seçilen mod göstergesi üstte\n- Büyük 6 haneli kod (kopyalama butonu ile)\n- \"Arkadaşınız bekleniyor...\" animasyonu\n\n### 3. Odaya Katılma\n- Büyük oda kodu girişi (6 haneli, büyük fontlar)\n- \"KATIL\" butonu\n- Geçersiz kod uyarıları\n\n### 4. Oyun Ekranları\n\n#### SIRAYLA MODU\n- **Tek Merkezi Panel:**\n  - **Ortak tahmin tablosu** (başlangıçta 6x5, dinamik genişleyen)\n  - Alt kısımda Türkçe klavye\n  - **Sıra sistemi:**\n    - Aktif oyuncunun ismi/avatarı parlak\n    - Pasif oyuncunun ismi/avatarı soluk\n  - **Dinamik satır ekleme:**\n    - 6. satır tamamlandıktan sonra kelime bulunmadıysa\n    - **Yumuşak animasyonla** yeni satır eklenir\n    - Tablo **otomatik scroll** yapar\n    - **Sınırsız** satır (kelime bulunana kadar)\n  - **Her tahmin sonrası:**\n    - Sıra otomatik değişir\n    - Yeni aktif oyuncu vurgulanır\n\n#### DÜELLO MODU\n- **Bölünmüş Ekran (50-50)**\n- **Sol Yarı:** Oyuncu 1\n  - Kendi tahmin tablosu (6x5 sabit)\n  - Kendi klavyesi\n- **Sağ Yarı:** Oyuncu 2\n  - Kendi tahmin tablosu (6x5 sabit)\n  - Kendi klavyesi\n- **Gizlilik Sistemi:**\n  - Kendi tarafın: Harfler + renkler görünür\n  - Karşı taraf: **Sadece renk kutuları**\n    - 🟩 Yeşil kare (doğru konum)\n    - 🟨 Sarı kare (yanlış konum)\n    - ⬜ Gri kare (yok)\n\n## UI Bileşenleri\n\n### Sırayla Modu - Özel Özellikler\n- **Aktif Oyuncu Göstergesi:**\n  - Üst kısımda büyük isim/avatar\n  - Parlak neon çerçeve\n  - \"Sıran!\" yazısı\n- **Tahmin Geçmişi:**\n  - Tüm önceki tahminler görünür\n  - Her satırın yanında hangi oyuncunun tahmini olduğu belirtilir\n  - Renkli indikator: 🔵 Oyuncu 1, 🔴 Oyuncu 2\n- **Dinamik Scroll:**\n  - 6+ satır olduğunda otomatik scroll\n  - Son tahmin her zaman görünür\n  - Smooth scrolling animasyonu\n\n### Düello Modu - Gizlilik Sistemi\n- **Kendi tarafın:** Normal görünüm (harfler + renkler)\n- **Karşı taraf:** Sadece renk kutuları\n  - Yeşil kare: ✅ (doğru konum)\n  - Sarı kare: 🟨 (yanlış konum)  \n  - Gri kare: ⬜ (yok)\n- **Real-time güncelleme:** Karşı oyuncu tahmin yaptığında anında renk kodları görünür\n\n### Harf Kutuları\n- **3D efekt** ile yükseltilmiş görünüm\n- **Flip animasyonu** tahmin sonrası\n- **Pulse efekti** aktif kutu için\n- **Glow efekti** sıra sahibi için\n\n### Klavye\n- **Türkçe klavye** (Ç, Ğ, I, İ, Ö, Ş, Ü dahil)\n- **Dinamik renk kodlaması:**\n  - Yeşil: Doğru konumda kullanılan harfler\n  - Sarı: Yanlış konumda kullanılan harfler\n  - Gri: Kelimede olmayan harfler\n- **Sıra tabanlı deaktivation:**\n  - Sırası olmayan oyuncu klavyeyi kullanamaz\n\n## Animasyonlar\n- **Harf girişi:** Scale + fade in\n- **Tahmin kontrolü:** Wave animasyonu (soldan sağa)\n- **Yanlış tahmin:** Shake animasyonu\n- **Kazanma:** Konfetti patlaması\n- **Sıra değişimi:** Oyuncu vurgulama geçişi\n- **Yeni satır ekleme:** Yukarıdan aşağı slide-in\n- **Sayfa geçişleri:** Slide animasyonları\n- **Düello modu sync:** Renk kutularının senkronize animasyonu\n\n## Responsive Tasarım\n- **Desktop:** Yan yana layout (optimum deneyim)\n- **Tablet:** Dikey stack\n- **Mobile:** Full screen, touch optimized, büyük klavye\n- **PWA desteği:** Offline oynanabilir\n\n## Özel Özellikler\n- **Real-time cursör** - Diğer oyuncunun yazdığı harfleri anlık gösterme\n- **Emoji reaksiyonları** - Hızlı tepki verme (😀, 😮, 🤔, 🎉)\n- **Başarı animasyonları** - Perfect guess, son saniye kazanımları\n\n## Tema Seçenekleri\n1. **Klasik Dark** (varsayılan)\n2. **Türk Bayrağı** (kırmızı-beyaz)\n3. **Ocean Blue** (mavi tonları)\n4. **Sunset** (turuncu-pembe gradyan)\n\n## Teknik Özellikler\n- **Framework:** Next.js\n- **Database:** Firebase Realtime Database\n- **Real-time Updates:** Firebase listeners\n- **Oda Sistemi:** 6 haneli kod tabanlı\n- **Kelime Havuzu:** 5 harfli Türkçe kelimeler\n- **Responsive:** Mobile-first approach\n\n## Oyun Akışı\n1. Ana menü → Oda oluştur/katıl\n2. Oda oluştur → Mod seçimi → Kod paylaşımı\n3. İkinci oyuncu katılımı → Otomatik oyun başlangıcı\n4. Sırayla mod: Ortak panel + sıra tabanlı\n5. Düello mod: Ayrı paneller + gizli kelimeler\n6. Kazanan belirleme → Tekrar oynama seçeneği","size_bytes":5348},"attached_assets/wordle_duo_development_guide_1755730047765.md":{"content":"# 🚀 WORDLE DUO - YAZILIM GELİŞTİRME KILAVUZU\n\n## 1. PROJE YAPISININ KURULUMU\n\n### 1.1 Next.js Proje İnisyalizasyonu\n```bash\n# Next.js projesi oluşturma\nnpx create-next-app@latest wordle-duo\ncd wordle-duo\n\n# Gerekli paketlerin yüklenmesi\nnpm install firebase framer-motion react-use-sound\nnpm install -D tailwindcss @types/node\n```\n\n### 1.2 Klasör Yapısı\n```\nwordle-duo/\n├── src/\n│   ├── app/\n│   │   ├── layout.tsx\n│   │   ├── page.tsx (Ana Menü)\n│   │   ├── create/\n│   │   │   ├── page.tsx (Oda Oluşturma)\n│   │   │   └── mode/page.tsx (Mod Seçimi)\n│   │   ├── join/\n│   │   │   └── page.tsx (Odaya Katılma)\n│   │   ├── room/\n│   │   │   └── [code]/\n│   │   │       ├── page.tsx (Oyun Ekranı)\n│   │   │       └── waiting/page.tsx (Bekleme)\n│   │   └── globals.css\n│   ├── components/\n│   │   ├── ui/\n│   │   │   ├── Button.tsx\n│   │   │   ├── Modal.tsx\n│   │   │   ├── LoadingSpinner.tsx\n│   │   │   └── ErrorMessage.tsx\n│   │   ├── game/\n│   │   │   ├── GameBoard.tsx\n│   │   │   ├── SequentialBoard.tsx\n│   │   │   ├── DuelBoard.tsx\n│   │   │   ├── Keyboard.tsx\n│   │   │   ├── LetterCell.tsx\n│   │   │   └── PlayerIndicator.tsx\n│   │   ├── layout/\n│   │   │   ├── Header.tsx\n│   │   │   ├── Navigation.tsx\n│   │   │   └── BackButton.tsx\n│   │   └── animations/\n│   │       ├── ConfettiAnimation.tsx\n│   │       ├── FlipAnimation.tsx\n│   │       └── TurnChangeAnimation.tsx\n│   ├── hooks/\n│   │   ├── useRoom.ts\n│   │   ├── useGame.ts\n│   │   ├── useKeyboard.ts\n│   │   └── useLocalStorage.ts\n│   ├── lib/\n│   │   ├── firebase.ts\n│   │   ├── game-logic.ts\n│   │   ├── turkish-words.ts\n│   │   └── utils.ts\n│   ├── types/\n│   │   ├── game.ts\n│   │   ├── room.ts\n│   │   └── player.ts\n│   └── constants/\n│       ├── gameConfig.ts\n│       ├── animations.ts\n│       └── colors.ts\n├── public/\n│   ├── sounds/\n│   │   ├── letter-input.wav\n│   │   ├── correct-guess.wav\n│   │   ├── wrong-guess.wav\n│   │   └── victory.wav\n│   └── icons/\n└── package.json\n```\n\n## 2. MOBİL-FIRST TASARIM SİSTEMİ\n\n### 2.1 Responsive Breakpoints (Tailwind Config)\n```javascript\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    screens: {\n      'xs': '475px',\n      'sm': '640px',\n      'md': '768px',\n      'lg': '1024px',\n      'xl': '1280px',\n    },\n    extend: {\n      colors: {\n        'dark-bg': '#0F172A',\n        'dark-secondary': '#1E293B',\n        'turkish-red': '#E11D48',\n        'turkish-gold': '#F59E0B',\n        'success-green': '#10B981',\n        'neon-blue': '#06B6D4',\n      },\n      fontFamily: {\n        'game': ['Inter', 'system-ui', 'sans-serif'],\n      },\n      animation: {\n        'flip': 'flip 0.6s ease-in-out',\n        'shake': 'shake 0.5s ease-in-out',\n        'pulse-glow': 'pulse-glow 2s ease-in-out infinite',\n        'slide-up': 'slide-up 0.3s ease-out',\n      }\n    }\n  }\n}\n```\n\n### 2.2 Mobil Klavye Component\n```typescript\n// components/game/MobileKeyboard.tsx\n'use client';\nimport { motion } from 'framer-motion';\n\ninterface MobileKeyboardProps {\n  onKeyPress: (key: string) => void;\n  keyboardStatus: Record<string, 'correct' | 'present' | 'absent'>;\n  disabled: boolean;\n}\n\nconst TURKISH_LAYOUT = [\n  ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P', 'Ğ', 'Ü'],\n  ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'Ş', 'İ'],\n  ['ENTER', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', 'Ö', 'Ç', 'BACKSPACE']\n];\n\nexport default function MobileKeyboard({ onKeyPress, keyboardStatus, disabled }: MobileKeyboardProps) {\n  const getKeyStatus = (key: string) => {\n    if (keyboardStatus[key]) return keyboardStatus[key];\n    return 'default';\n  };\n\n  const getKeyStyles = (key: string) => {\n    const status = getKeyStatus(key);\n    const baseStyles = \"min-h-[48px] rounded-lg font-semibold text-white transition-all duration-200 active:scale-95\";\n    \n    switch (status) {\n      case 'correct': return `${baseStyles} bg-success-green shadow-lg`;\n      case 'present': return `${baseStyles} bg-turkish-gold shadow-lg`;\n      case 'absent': return `${baseStyles} bg-gray-600`;\n      default: return `${baseStyles} bg-gray-800 hover:bg-gray-700 active:bg-gray-600`;\n    }\n  };\n\n  return (\n    <div className={`w-full px-2 pb-safe ${disabled ? 'opacity-50 pointer-events-none' : ''}`}>\n      {TURKISH_LAYOUT.map((row, rowIndex) => (\n        <motion.div\n          key={rowIndex}\n          className=\"flex justify-center gap-1 mb-2\"\n          initial={{ y: 20, opacity: 0 }}\n          animate={{ y: 0, opacity: 1 }}\n          transition={{ delay: rowIndex * 0.1 }}\n        >\n          {row.map((key) => (\n            <motion.button\n              key={key}\n              className={`\n                ${getKeyStyles(key)}\n                ${key === 'ENTER' || key === 'BACKSPACE' ? 'px-3 text-xs' : 'flex-1 text-lg'}\n                ${key === 'ENTER' ? 'max-w-[80px]' : ''}\n                ${key === 'BACKSPACE' ? 'max-w-[80px]' : ''}\n              `}\n              onClick={() => onKeyPress(key)}\n              whileTap={{ scale: 0.95 }}\n              disabled={disabled}\n            >\n              {key === 'BACKSPACE' ? '⌫' : key === 'ENTER' ? 'GİR' : key}\n            </motion.button>\n          ))}\n        </motion.div>\n      ))}\n    </div>\n  );\n}\n```\n\n### 2.3 Mobil Letter Cell Component\n```typescript\n// components/game/LetterCell.tsx\n'use client';\nimport { motion } from 'framer-motion';\n\ninterface LetterCellProps {\n  letter: string;\n  status: 'empty' | 'filled' | 'correct' | 'present' | 'absent';\n  isActive?: boolean;\n  delay?: number;\n}\n\nexport default function LetterCell({ letter, status, isActive, delay = 0 }: LetterCellProps) {\n  const getCellStyles = () => {\n    const baseStyles = \"w-14 h-14 border-2 flex items-center justify-center text-2xl font-bold rounded-lg transition-all duration-300\";\n    \n    switch (status) {\n      case 'correct':\n        return `${baseStyles} bg-success-green border-success-green text-white`;\n      case 'present':\n        return `${baseStyles} bg-turkish-gold border-turkish-gold text-white`;\n      case 'absent':\n        return `${baseStyles} bg-gray-600 border-gray-600 text-white`;\n      case 'filled':\n        return `${baseStyles} bg-dark-secondary border-gray-400 text-white`;\n      default:\n        return `${baseStyles} bg-transparent border-gray-600 text-white ${isActive ? 'border-neon-blue shadow-lg shadow-neon-blue/30' : ''}`;\n    }\n  };\n\n  return (\n    <motion.div\n      className={getCellStyles()}\n      initial={{ scale: 0.8, opacity: 0 }}\n      animate={{ scale: 1, opacity: 1 }}\n      transition={{ delay, duration: 0.2 }}\n      whileHover={{ scale: 1.05 }}\n    >\n      <motion.span\n        key={letter}\n        initial={{ scale: 0 }}\n        animate={{ scale: 1 }}\n        transition={{ type: \"spring\", stiffness: 300 }}\n      >\n        {letter}\n      </motion.span>\n    </motion.div>\n  );\n}\n```\n\n## 3. OYUN LOGİĞİ VE STATE YÖNETİMİ\n\n### 3.1 Custom Hooks\n\n#### useGame Hook\n```typescript\n// hooks/useGame.ts\n'use client';\nimport { useState, useCallback, useEffect } from 'react';\nimport { GameState, GuessResult } from '@/types/game';\nimport { checkGuess, isValidWord } from '@/lib/game-logic';\n\ninterface UseGameProps {\n  roomCode: string;\n  gameMode: 'sequential' | 'duel';\n  isMyTurn: boolean;\n  targetWord: string;\n}\n\nexport function useGame({ roomCode, gameMode, isMyTurn, targetWord }: UseGameProps) {\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [gameHistory, setGameHistory] = useState<GuessResult[]>([]);\n  const [currentRow, setCurrentRow] = useState(0);\n  const [gameStatus, setGameStatus] = useState<'playing' | 'won' | 'lost'>('playing');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const addLetter = useCallback((letter: string) => {\n    if (!isMyTurn || currentGuess.length >= 5 || isSubmitting) return;\n    \n    setCurrentGuess(prev => prev + letter);\n  }, [isMyTurn, currentGuess.length, isSubmitting]);\n\n  const removeLetter = useCallback(() => {\n    if (!isMyTurn || isSubmitting) return;\n    \n    setCurrentGuess(prev => prev.slice(0, -1));\n  }, [isMyTurn, isSubmitting]);\n\n  const submitGuess = useCallback(async () => {\n    if (!isMyTurn || currentGuess.length !== 5 || isSubmitting) return;\n    \n    if (!isValidWord(currentGuess)) {\n      // Hata animasyonu tetikle\n      return;\n    }\n\n    setIsSubmitting(true);\n    \n    try {\n      const result = checkGuess(currentGuess, targetWord);\n      \n      setGameHistory(prev => [...prev, {\n        guess: currentGuess,\n        result,\n        rowIndex: currentRow\n      }]);\n      \n      // Check win condition\n      if (result.every(r => r === 'correct')) {\n        setGameStatus('won');\n      } else if (currentRow >= 5) {\n        setGameStatus('lost');\n      }\n      \n      setCurrentRow(prev => prev + 1);\n      setCurrentGuess('');\n      \n      // Firebase'e güncelleme gönder\n      await updateGameState(roomCode, {\n        guess: currentGuess,\n        result,\n        rowIndex: currentRow\n      });\n      \n    } catch (error) {\n      console.error('Guess submission error:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  }, [isMyTurn, currentGuess, currentRow, targetWord, roomCode, isSubmitting]);\n\n  return {\n    currentGuess,\n    gameHistory,\n    currentRow,\n    gameStatus,\n    isSubmitting,\n    addLetter,\n    removeLetter,\n    submitGuess\n  };\n}\n```\n\n#### useRoom Hook\n```typescript\n// hooks/useRoom.ts\n'use client';\nimport { useState, useEffect, useCallback } from 'react';\nimport { onValue, ref, update } from 'firebase/database';\nimport { database } from '@/lib/firebase';\nimport { RoomData, Player } from '@/types/room';\n\nexport function useRoom(roomCode: string) {\n  const [roomData, setRoomData] = useState<RoomData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!roomCode) return;\n\n    const roomRef = ref(database, `rooms/${roomCode}`);\n    \n    const unsubscribe = onValue(roomRef, (snapshot) => {\n      setLoading(false);\n      \n      if (snapshot.exists()) {\n        setRoomData(snapshot.val());\n        setError(null);\n      } else {\n        setError('Oda bulunamadı');\n        setRoomData(null);\n      }\n    }, (error) => {\n      setLoading(false);\n      setError('Bağlantı hatası');\n      console.error('Room listener error:', error);\n    });\n\n    return () => unsubscribe();\n  }, [roomCode]);\n\n  const updateRoom = useCallback(async (updates: Partial<RoomData>) => {\n    if (!roomCode) return;\n    \n    try {\n      await update(ref(database, `rooms/${roomCode}`), updates);\n    } catch (error) {\n      console.error('Room update error:', error);\n      setError('Güncelleme hatası');\n    }\n  }, [roomCode]);\n\n  return {\n    roomData,\n    loading,\n    error,\n    updateRoom\n  };\n}\n```\n\n### 3.2 Game Logic Utilities\n```typescript\n// lib/game-logic.ts\nimport { turkishWords } from './turkish-words';\n\nexport type LetterStatus = 'correct' | 'present' | 'absent';\n\nexport interface GuessResult {\n  guess: string;\n  result: LetterStatus[];\n  rowIndex: number;\n  playerId?: string;\n  timestamp?: number;\n}\n\nexport function checkGuess(guess: string, targetWord: string): LetterStatus[] {\n  const result: LetterStatus[] = [];\n  const targetLetters = targetWord.split('');\n  const guessLetters = guess.split('');\n  \n  // First pass: Mark correct positions\n  for (let i = 0; i < 5; i++) {\n    if (guessLetters[i] === targetLetters[i]) {\n      result[i] = 'correct';\n      targetLetters[i] = '';\n      guessLetters[i] = '';\n    }\n  }\n  \n  // Second pass: Mark present letters\n  for (let i = 0; i < 5; i++) {\n    if (guessLetters[i] !== '') {\n      const foundIndex = targetLetters.findIndex(letter => letter === guessLetters[i]);\n      if (foundIndex !== -1) {\n        result[i] = 'present';\n        targetLetters[foundIndex] = '';\n      } else {\n        result[i] = 'absent';\n      }\n    }\n  }\n  \n  return result;\n}\n\nexport function isValidWord(word: string): boolean {\n  return turkishWords.includes(word.toUpperCase());\n}\n\nexport function generateRandomWord(): string {\n  return turkishWords[Math.floor(Math.random() * turkishWords.length)];\n}\n\nexport function generateRoomCode(): string {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  let code = '';\n  for (let i = 0; i < 6; i++) {\n    code += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n  return code;\n}\n```\n\n## 4. SAYFA UYGULAMALARI\n\n### 4.1 Ana Menü Sayfası\n```typescript\n// app/page.tsx\n'use client';\nimport { motion } from 'framer-motion';\nimport { useRouter } from 'next/navigation';\nimport { useState } from 'react';\n\nexport default function HomePage() {\n  const router = useRouter();\n  const [playerName, setPlayerName] = useState('');\n\n  const handleCreateRoom = () => {\n    if (playerName.trim()) {\n      localStorage.setItem('playerName', playerName);\n      router.push('/create');\n    }\n  };\n\n  const handleJoinRoom = () => {\n    if (playerName.trim()) {\n      localStorage.setItem('playerName', playerName);\n      router.push('/join');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-dark-bg to-dark-secondary flex flex-col items-center justify-center p-4\">\n      {/* Logo */}\n      <motion.div\n        initial={{ y: -50, opacity: 0 }}\n        animate={{ y: 0, opacity: 1 }}\n        className=\"text-center mb-12\"\n      >\n        <h1 className=\"text-4xl md:text-6xl font-bold text-white mb-2\">\n          WORDLE <span className=\"text-turkish-red\">DUO</span>\n        </h1>\n        <p className=\"text-gray-400 text-lg\">İkili Türkçe Kelime Oyunu</p>\n      </motion.div>\n\n      {/* Player Name Input */}\n      <motion.div\n        initial={{ y: 20, opacity: 0 }}\n        animate={{ y: 0, opacity: 1 }}\n        transition={{ delay: 0.2 }}\n        className=\"w-full max-w-md mb-8\"\n      >\n        <input\n          type=\"text\"\n          placeholder=\"Oyuncu adınız...\"\n          value={playerName}\n          onChange={(e) => setPlayerName(e.target.value)}\n          className=\"w-full px-4 py-3 bg-white/10 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-neon-blue focus:ring-2 focus:ring-neon-blue/30\"\n          maxLength={20}\n        />\n      </motion.div>\n\n      {/* Action Buttons */}\n      <div className=\"w-full max-w-md space-y-4\">\n        <motion.button\n          initial={{ y: 20, opacity: 0 }}\n          animate={{ y: 0, opacity: 1 }}\n          transition={{ delay: 0.3 }}\n          onClick={handleCreateRoom}\n          disabled={!playerName.trim()}\n          className=\"w-full py-4 bg-turkish-red hover:bg-red-600 disabled:bg-gray-600 disabled:cursor-not-allowed text-white font-semibold rounded-lg transition-all duration-200 transform hover:scale-105 active:scale-95\"\n          whileTap={{ scale: 0.95 }}\n        >\n          🏠 ODA OLUŞTUR\n        </motion.button>\n\n        <motion.button\n          initial={{ y: 20, opacity: 0 }}\n          animate={{ y: 0, opacity: 1 }}\n          transition={{ delay: 0.4 }}\n          onClick={handleJoinRoom}\n          disabled={!playerName.trim()}\n          className=\"w-full py-4 bg-neon-blue hover:bg-cyan-600 disabled:bg-gray-600 disabled:cursor-not-allowed text-white font-semibold rounded-lg transition-all duration-200 transform hover:scale-105 active:scale-95\"\n          whileTap={{ scale: 0.95 }}\n        >\n          🚪 ODAYA KATIL\n        </motion.button>\n      </div>\n\n      {/* Footer */}\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ delay: 0.6 }}\n        className=\"mt-12 text-center text-gray-500\"\n      >\n        <p>Arkadaşınızla birlikte kelime bulmacası çözün!</p>\n      </motion.div>\n    </div>\n  );\n}\n```\n\n### 4.2 Oyun Ekranı - Sequential Mode\n```typescript\n// components/game/SequentialBoard.tsx\n'use client';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useGame } from '@/hooks/useGame';\nimport LetterCell from './LetterCell';\nimport MobileKeyboard from './MobileKeyboard';\nimport PlayerIndicator from './PlayerIndicator';\n\ninterface SequentialBoardProps {\n  roomData: RoomData;\n  currentPlayer: Player;\n  isMyTurn: boolean;\n}\n\nexport default function SequentialBoard({ roomData, currentPlayer, isMyTurn }: SequentialBoardProps) {\n  const {\n    currentGuess,\n    gameHistory,\n    currentRow,\n    gameStatus,\n    addLetter,\n    removeLetter,\n    submitGuess\n  } = useGame({\n    roomCode: roomData.code,\n    gameMode: 'sequential',\n    isMyTurn,\n    targetWord: roomData.word\n  });\n\n  const handleKeyPress = (key: string) => {\n    if (key === 'ENTER') {\n      submitGuess();\n    } else if (key === 'BACKSPACE') {\n      removeLetter();\n    } else {\n      addLetter(key);\n    }\n  };\n\n  // Calculate total rows (minimum 6, expand as needed)\n  const totalRows = Math.max(6, gameHistory.length + 1);\n  const rows = Array.from({ length: totalRows }, (_, index) => {\n    if (index < gameHistory.length) {\n      return gameHistory[index];\n    } else if (index === currentRow) {\n      return {\n        guess: currentGuess.padEnd(5, ''),\n        result: Array(5).fill('filled'),\n        isActive: true\n      };\n    } else {\n      return {\n        guess: '     ',\n        result: Array(5).fill('empty'),\n        isActive: false\n      };\n    }\n  });\n\n  return (\n    <div className=\"flex flex-col h-screen bg-gradient-to-br from-dark-bg to-dark-secondary\">\n      {/* Header with Players */}\n      <div className=\"p-4 border-b border-gray-700\">\n        <div className=\"flex justify-between items-center\">\n          <PlayerIndicator \n            player={roomData.players[0]}\n            isActive={roomData.currentTurn === 0}\n            isMe={roomData.players[0].id === currentPlayer.id}\n          />\n          <div className=\"text-white font-bold\">VS</div>\n          <PlayerIndicator \n            player={roomData.players[1]}\n            isActive={roomData.currentTurn === 1}\n            isMe={roomData.players[1].id === currentPlayer.id}\n          />\n        </div>\n        \n        {/* Turn Indicator */}\n        <motion.div\n          className=\"text-center mt-2\"\n          key={roomData.currentTurn}\n          initial={{ scale: 0.8, opacity: 0 }}\n          animate={{ scale: 1, opacity: 1 }}\n        >\n          <span className={`text-lg font-semibold ${isMyTurn ? 'text-neon-blue' : 'text-gray-400'}`}>\n            {isMyTurn ? 'SİZİN SIRANIZ!' : 'RAKİBİNİZİN SIRASI'}\n          </span>\n        </motion.div>\n      </div>\n\n      {/* Game Grid */}\n      <div className=\"flex-1 overflow-y-auto p-4\">\n        <div className=\"max-w-sm mx-auto space-y-2\">\n          <AnimatePresence>\n            {rows.map((row, rowIndex) => (\n              <motion.div\n                key={rowIndex}\n                className=\"flex justify-center gap-2\"\n                initial={{ y: -20, opacity: 0 }}\n                animate={{ y: 0, opacity: 1 }}\n                transition={{ delay: rowIndex * 0.05 }}\n              >\n                {Array.from({ length: 5 }).map((_, cellIndex) => (\n                  <LetterCell\n                    key={`${rowIndex}-${cellIndex}`}\n                    letter={row.guess[cellIndex] || ''}\n                    status={row.result[cellIndex]}\n                    isActive={row.isActive && cellIndex === currentGuess.length}\n                    delay={cellIndex * 0.1}\n                  />\n                ))}\n                \n                {/* Player indicator for each row */}\n                {gameHistory[rowIndex] && (\n                  <div className=\"flex items-center ml-2\">\n                    <span className={`w-3 h-3 rounded-full ${\n                      gameHistory[rowIndex].playerId === roomData.players[0].id \n                        ? 'bg-blue-500' \n                        : 'bg-red-500'\n                    }`} />\n                  </div>\n                )}\n              </motion.div>\n            ))}\n          </AnimatePresence>\n        </div>\n      </div>\n\n      {/* Mobile Keyboard */}\n      <MobileKeyboard\n        onKeyPress={handleKeyPress}\n        keyboardStatus={getKeyboardStatus(gameHistory)}\n        disabled={!isMyTurn || gameStatus !== 'playing'}\n      />\n    </div>\n  );\n}\n```\n\n### 4.3 Oyun Ekranı - Duel Mode\n```typescript\n// components/game/DuelBoard.tsx\n'use client';\nimport { motion } from 'framer-motion';\nimport { useGame } from '@/hooks/useGame';\nimport LetterCell from './LetterCell';\nimport MobileKeyboard from './MobileKeyboard';\n\ninterface DuelBoardProps {\n  roomData: RoomData;\n  currentPlayer: Player;\n  myWord: string;\n}\n\nexport default function DuelBoard({ roomData, currentPlayer, myWord }: DuelBoardProps) {\n  const {\n    currentGuess,\n    gameHistory,\n    currentRow,\n    gameStatus,\n    addLetter,\n    removeLetter,\n    submitGuess\n  } = useGame({\n    roomCode: roomData.code,\n    gameMode: 'duel',\n    isMyTurn: true, // Always true in duel mode\n    targetWord: myWord\n  });\n\n  const handleKeyPress = (key: string) => {\n    if (key === 'ENTER') {\n      submitGuess();\n    } else if (key === 'BACKSPACE') {\n      removeLetter();\n    } else {\n      addLetter(key);\n    }\n  };\n\n  // Get opponent's progress (only colors)\n  const opponentProgress = roomData.opponentProgress || [];\n\n  return (\n    <div className=\"flex flex-col h-screen bg-gradient-to-br from-dark-bg to-dark-secondary\">\n      {/* Header */}\n      <div className=\"p-4 border-b border-gray-700 text-center\">\n        <h2 className=\"text-xl font-bold text-white\">DÜELLO MODU</h2>\n        <p className=\"text-gray-400\">Rakibinizle aynı anda yarışın!</p>\n      </div>\n\n      {/* Split Screen - Mobile: Stacked */}\n      <div className=\"flex-1 flex flex-col md:flex-row overflow-hidden\">\n        \n        {/* My Board */}\n        <div className=\"flex-1 p-2 border-b md:border-b-0 md:border-r border-gray-700\">\n          <div className=\"text-center mb-2\">\n            <span className=\"text-neon-blue font-semibold\">SİZİN TAHMİNLERİNİZ</span>\n          </div>\n          \n          <div className=\"max-w-sm mx-auto space-y-1\">\n            {Array.from({ length: 6 }).map((_, rowIndex) => (\n              <div key={rowIndex} className=\"flex justify-center gap-1\">\n                {Array.from({ length: 5 }).map((_, cellIndex) => {\n                  let letter = '';\n                  let status = 'empty';\n                  \n                  if (rowIndex < gameHistory.length) {\n                    letter = gameHistory[rowIndex].guess[cellIndex];\n                    status = gameHistory[rowIndex].result[cellIndex];\n                  } else if (rowIndex === currentRow) {\n                    letter = currentGuess[cellIndex] || '';\n                    status = letter ? 'filled' : 'empty';\n                  }\n                  \n                  return (\n                    <LetterCell\n                      key={cellIndex}\n                      letter={letter}\n                      status={status}\n                      isActive={rowIndex === currentRow && cellIndex === currentGuess.length}\n                    />\n                  );\n                })}\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Opponent Board (Colors Only) */}\n        <div className=\"flex-1 p-2\">\n          <div className=\"text-center mb-2\">\n            <span className=\"text-turkish-red font-semibold\">RAKİBİNİZİN İLERLEMESİ</span>\n          </div>\n          \n          <div className=\"max-w-sm mx-auto space-y-1\">\n            {Array.from({ length: 6 }).map((_, rowIndex) => (\n              <div key={rowIndex} className=\"flex justify-center gap-1\">\n                {Array.from({ length: 5 }).map((_, cellIndex) => {\n                  const opponentRow = opponentProgress[rowIndex];\n                  let status = 'empty';\n                  \n                  if (opponentRow && opponentRow.colors) {\n                    status = opponentRow.colors[cellIndex];\n                  }\n                  \n                  return (\n                    <div\n                      key={cellIndex}\n                      className={`w-8 h-8 border-2 rounded flex items-center justify-center ${\n                        status === 'correct' ? 'bg-success-green border-success-green' :\n                        status === 'present' ? 'bg-turkish-gold border-turkish-gold' :\n                        status === 'absent' ? 'bg-gray-600 border-gray-600' :\n                        'bg-transparent border-gray-600'\n                      }`}\n                    >\n                      {status !== 'empty' && (\n                        <div className=\"w-2 h-2 rounded-full bg-white opacity-50\" />\n                      )}\n                    </div>\n                  );\n                })}\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Mobile Keyboard */}\n      <MobileKeyboard\n        onKeyPress={handleKeyPress}\n        keyboardStatus={getKeyboardStatus(gameHistory)}\n        disabled={gameStatus !== 'playing'}\n      />\n    </div>\n  );\n}\n```\n\n## 5. FIREBASE ENTEGRASYONU\n\n### 5.1 Firebase Konfigürasyonu\n```typescript\n// lib/firebase.ts\nimport { initializeApp } from 'firebase/app';\nimport { getDatabase } from 'firebase/database';\n\nconst firebaseConfig = {\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.NEXT_PUBLIC_FIREBASE_DATABASE_URL,\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID\n};\n\nconst app = initializeApp(firebaseConfig);\nexport const database = getDatabase(app);\n```\n\n### 5.2 Room Management Functions\n```typescript\n// lib/room-manager.ts\nimport { ref, set, update, get, onValue, off } from 'firebase/database';\nimport { database } from './firebase';\nimport { RoomData, Player } from '@/types/room';\nimport { generateRoomCode, generateRandomWord } from './game-logic';\n\nexport async function createRoom(gameMode: 'sequential' | 'duel', hostPlayer: Player): Promise<string> {\n  const roomCode = generateRoomCode();\n  \n  const roomData: RoomData = {\n    code: roomCode,\n    mode: gameMode,\n    host: hostPlayer.id,\n    players: [hostPlayer],\n    status: 'waiting',\n    word: generateRandomWord(),\n    currentTurn: 0,\n    gameHistory: [],\n    createdAt: Date.now(),\n    lastActivity: Date.now()\n  };\n\n  // If duel mode, assign different words\n  if (gameMode === 'duel') {\n    roomData.player1Word = generateRandomWord();\n    roomData.player2Word = generateRandomWord();\n    // Ensure different words\n    while (roomData.player1Word === roomData.player2Word) {\n      roomData.player2Word = generateRandomWord();\n    }\n  }\n\n  await set(ref(database, `rooms/${roomCode}`), roomData);\n  return roomCode;\n}\n\nexport async function joinRoom(roomCode: string, player: Player): Promise<RoomData> {\n  const roomRef = ref(database, `rooms/${roomCode}`);\n  const snapshot = await get(roomRef);\n  \n  if (!snapshot.exists()) {\n    throw new Error('Oda bulunamadı!');\n  }\n  \n  const roomData = snapshot.val() as RoomData;\n  \n  if (roomData.players.length >= 2) {\n    throw new Error('Oda dolu!');\n  }\n  \n  if (roomData.status !== 'waiting') {\n    throw new Error('Oyun zaten başlamış!');\n  }\n\n  const updatedRoomData = {\n    ...roomData,\n    players: [...roomData.players, player],\n    status: 'playing',\n    lastActivity: Date.now()\n  };\n\n  await update(roomRef, updatedRoomData);\n  return updatedRoomData;\n}\n\nexport async function updateGameState(roomCode: string, updates: any) {\n  const roomRef = ref(database, `rooms/${roomCode}`);\n  await update(roomRef, {\n    ...updates,\n    lastActivity: Date.now()\n  });\n}\n\nexport function subscribeToRoom(roomCode: string, callback: (roomData: RoomData | null) => void) {\n  const roomRef = ref(database, `rooms/${roomCode}`);\n  \n  const listener = onValue(roomRef, (snapshot) => {\n    if (snapshot.exists()) {\n      callback(snapshot.val());\n    } else {\n      callback(null);\n    }\n  });\n\n  return () => off(roomRef, 'value', listener);\n}\n```\n\n## 6. TYPESCRİPT TANIMLARI\n\n### 6.1 Game Types\n```typescript\n// types/game.ts\nexport type LetterStatus = 'empty' | 'filled' | 'correct' | 'present' | 'absent';\n\nexport interface GuessResult {\n  guess: string;\n  result: LetterStatus[];\n  rowIndex: number;\n  playerId?: string;\n  playerName?: string;\n  timestamp?: number;\n}\n\nexport interface GameState {\n  currentRow: number;\n  currentGuess: string;\n  gameHistory: GuessResult[];\n  status: 'waiting' | 'playing' | 'won' | 'lost' | 'paused';\n  winner?: string;\n}\n\nexport interface KeyboardStatus {\n  [key: string]: 'correct' | 'present' | 'absent';\n}\n```\n\n### 6.2 Room Types\n```typescript\n// types/room.ts\nexport interface Player {\n  id: string;\n  name: string;\n  avatar: string;\n  joinTime: number;\n  status: 'online' | 'offline' | 'disconnected';\n  lastSeen: number;\n}\n\nexport interface RoomData {\n  code: string;\n  mode: 'sequential' | 'duel';\n  host: string;\n  players: Player[];\n  status: 'waiting' | 'playing' | 'finished' | 'paused';\n  word: string;\n  player1Word?: string; // For duel mode\n  player2Word?: string; // For duel mode\n  currentTurn: number;\n  gameHistory: GuessResult[];\n  opponentProgress?: any[];\n  totalRows?: number;\n  createdAt: number;\n  lastActivity: number;\n  winner?: string;\n  winReason?: 'correct_guess' | 'opponent_quit' | 'time_limit';\n}\n```\n\n## 7. MOBİL OPTİMİZASYON VE PWA\n\n### 7.1 PWA Konfigürasyonu\n```json\n// public/manifest.json\n{\n  \"name\": \"Wordle Duo - İkili Türkçe Kelime Oyunu\",\n  \"short_name\": \"Wordle Duo\",\n  \"description\": \"Arkadaşınızla birlikte Türkçe kelime bulmaca oyunu\",\n  \"start_url\": \"/\",\n  \"display\": \"standalone\",\n  \"background_color\": \"#0F172A\",\n  \"theme_color\": \"#E11D48\",\n  \"orientation\": \"portrait\",\n  \"icons\": [\n    {\n      \"src\": \"/icons/icon-192.png\",\n      \"sizes\": \"192x192\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"/icons/icon-512.png\",\n      \"sizes\": \"512x512\",\n      \"type\": \"image/png\"\n    }\n  ]\n}\n```\n\n### 7.2 Service Worker (PWA)\n```javascript\n// public/sw.js\nconst CACHE_NAME = 'wordle-duo-v1';\nconst STATIC_CACHE = [\n  '/',\n  '/create',\n  '/join',\n  '/manifest.json'\n];\n\nself.addEventListener('install', (event) => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then((cache) => cache.addAll(STATIC_CACHE))\n  );\n});\n\nself.addEventListener('fetch', (event) => {\n  event.respondWith(\n    caches.match(event.request)\n      .then((response) => {\n        return response || fetch(event.request);\n      })\n  );\n});\n```\n\n### 7.3 Mobil Dokunmatik Optimizasyonu\n```typescript\n// components/ui/TouchOptimized.tsx\n'use client';\nimport { ReactNode, TouchEvent, useState } from 'react';\n\ninterface TouchOptimizedProps {\n  children: ReactNode;\n  onTap?: () => void;\n  disabled?: boolean;\n  className?: string;\n}\n\nexport default function TouchOptimized({ \n  children, \n  onTap, \n  disabled, \n  className = '' \n}: TouchOptimizedProps) {\n  const [isPressed, setIsPressed] = useState(false);\n\n  const handleTouchStart = (e: TouchEvent) => {\n    if (!disabled) {\n      setIsPressed(true);\n      e.preventDefault();\n    }\n  };\n\n  const handleTouchEnd = (e: TouchEvent) => {\n    if (!disabled && isPressed) {\n      setIsPressed(false);\n      onTap?.();\n      e.preventDefault();\n    }\n  };\n\n  const handleTouchCancel = () => {\n    setIsPressed(false);\n  };\n\n  return (\n    <div\n      className={`\n        ${className}\n        ${isPressed ? 'scale-95' : 'scale-100'}\n        ${disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}\n        transition-transform duration-100 ease-out\n        select-none\n        touch-manipulation\n      `}\n      onTouchStart={handleTouchStart}\n      onTouchEnd={handleTouchEnd}\n      onTouchCancel={handleTouchCancel}\n      style={{\n        WebkitTouchCallout: 'none',\n        WebkitUserSelect: 'none',\n        userSelect: 'none'\n      }}\n    >\n      {children}\n    </div>\n  );\n}\n```\n\n## 8. PERFORMANS VE OPTİMİZASYON\n\n### 8.1 React Memo ve Optimizasyonlar\n```typescript\n// components/game/OptimizedLetterCell.tsx\n'use client';\nimport { memo } from 'react';\nimport { motion } from 'framer-motion';\n\ninterface LetterCellProps {\n  letter: string;\n  status: string;\n  isActive?: boolean;\n  position: number;\n}\n\nconst LetterCell = memo(({ letter, status, isActive, position }: LetterCellProps) => {\n  return (\n    <motion.div\n      className={getStatusStyles(status, isActive)}\n      initial={{ scale: 0.8 }}\n      animate={{ scale: 1 }}\n      transition={{ delay: position * 0.05 }}\n      layout\n    >\n      {letter}\n    </motion.div>\n  );\n});\n\nLetterCell.displayName = 'LetterCell';\nexport default LetterCell;\n```\n\n### 8.2 Lazy Loading ve Code Splitting\n```typescript\n// app/room/[code]/page.tsx\nimport { lazy, Suspense } from 'react';\nimport LoadingSpinner from '@/components/ui/LoadingSpinner';\n\n// Lazy load game components\nconst SequentialBoard = lazy(() => import('@/components/game/SequentialBoard'));\nconst DuelBoard = lazy(() => import('@/components/game/DuelBoard'));\n\nexport default function RoomPage({ params }: { params: { code: string } }) {\n  return (\n    <Suspense fallback={<LoadingSpinner />}>\n      {/* Room content */}\n    </Suspense>\n  );\n}\n```\n\n## 9. TEST STRATEJISI\n\n### 9.1 Unit Testler\n```typescript\n// __tests__/game-logic.test.ts\nimport { checkGuess, isValidWord } from '@/lib/game-logic';\n\ndescribe('Game Logic', () => {\n  test('checkGuess returns correct results', () => {\n    const result = checkGuess('ARABA', 'KITAP');\n    expect(result).toEqual(['absent', 'absent', 'present', 'present', 'absent']);\n  });\n\n  test('isValidWord validates Turkish words', () => {\n    expect(isValidWord('ARABA')).toBe(true);\n    expect(isValidWord('INVALID')).toBe(false);\n  });\n});\n```\n\n### 9.2 Integration Testler\n```typescript\n// __tests__/room-management.test.ts\nimport { createRoom, joinRoom } from '@/lib/room-manager';\n\ndescribe('Room Management', () => {\n  test('creates room successfully', async () => {\n    const player = { id: '1', name: 'Test', avatar: '👨‍💻', joinTime: Date.now() };\n    const roomCode = await createRoom('sequential', player);\n    expect(roomCode).toHaveLength(6);\n  });\n});\n```\n\n## 10. DEPLOYMENT VE PRODUCTION\n\n### 10.1 Vercel Deployment\n```json\n// vercel.json\n{\n  \"framework\": \"nextjs\",\n  \"regions\": [\"fra1\"],\n  \"env\": {\n    \"NEXT_PUBLIC_FIREBASE_API_KEY\": \"@firebase-api-key\",\n    \"NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN\": \"@firebase-auth-domain\",\n    \"NEXT_PUBLIC_FIREBASE_DATABASE_URL\": \"@firebase-database-url\"\n  }\n}\n```\n\n### 10.2 Environment Variables\n```bash\n# .env.local\nNEXT_PUBLIC_FIREBASE_API_KEY=your_api_key\nNEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=your_project.firebaseapp.com\nNEXT_PUBLIC_FIREBASE_DATABASE_URL=https://your_project.firebaseio.com\nNEXT_PUBLIC_FIREBASE_PROJECT_ID=your_project\nNEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=your_project.appspot.com\nNEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=your_sender_id\nNEXT_PUBLIC_FIREBASE_APP_ID=your_app_id\n```\n\n### 10.3 Build ve Deploy Scripts\n```json\n// package.json scripts\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\",\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\",\n    \"type-check\": \"tsc --noEmit\",\n    \"deploy\": \"vercel --prod\"\n  }\n}\n```\n\n## 11. MONİTÖRİNG VE ANALİTİK\n\n### 11.1 Error Tracking\n```typescript\n// lib/error-tracking.ts\nexport function trackError(error: Error, context?: any) {\n  console.error('Game Error:', error, context);\n  \n  // Production'da Sentry veya başka bir service kullanılabilir\n  if (process.env.NODE_ENV === 'production') {\n    // Sentry.captureException(error, { extra: context });\n  }\n}\n```\n\n### 11.2 Game Analytics\n```typescript\n// lib/analytics.ts\nexport function trackGameEvent(event: string, data?: any) {\n  console.log('Game Event:', event, data);\n  \n  // Production'da Google Analytics veya başka bir service\n  if (process.env.NODE_ENV === 'production') {\n    // gtag('event', event, data);\n  }\n}\n\n// Oyun olayları\nexport const GAME_EVENTS = {\n  ROOM_CREATED: 'room_created',\n  ROOM_JOINED: 'room_joined',\n  GAME_STARTED: 'game_started',\n  GUESS_SUBMITTED: 'guess_submitted',\n  GAME_WON: 'game_won',\n  GAME_LOST: 'game_lost'\n};\n```\n\n## 12. GÜVENLİK VE VALIDASYON\n\n### 12.1 Input Sanitization\n```typescript\n// lib/validation.ts\nexport function sanitizePlayerName(name: string): string {\n  return name\n    .trim()\n    .slice(0, 20)\n    .replace(/[<>]/g, '') // XSS korunması\n    .replace(/\\s+/g, ' '); // Fazla boşlukları temizle\n}\n\nexport function validateRoomCode(code: string): boolean {\n  return /^[A-Z0-9]{6}$/.test(code);\n}\n\nexport function validateGuess(guess: string): boolean {\n  return /^[A-ZÇĞIİÖŞÜ]{5}$/.test(guess.toUpperCase());\n}\n```\n\n### 12.2 Rate Limiting\n```typescript\n// lib/rate-limiter.ts\nconst rateLimitMap = new Map<string, { count: number; resetTime: number }>();\n\nexport function checkRateLimit(playerId: string, maxRequests = 10, windowMs = 60000): boolean {\n  const now = Date.now();\n  const playerData = rateLimitMap.get(playerId);\n  \n  if (!playerData || now > playerData.resetTime) {\n    rateLimitMap.set(playerId, { count: 1, resetTime: now + windowMs });\n    return true;\n  }\n  \n  if (playerData.count >= maxRequests) {\n    return false;\n  }\n  \n  playerData.count++;\n  return true;\n}\n```\n\nBu kapsamlı geliştirme kılavuzu, WORDLE DUO oyununun Next.js ile mobil-first yaklaşımında geliştirilmesi için gereken tüm bileşenleri ve yaklaşımları içermektedir. Responsive tasarım, real-time multiplayer functionality, PWA özellikleri ve production-ready optimizasyonlar dahil edilmiştir.","size_bytes":38197},"attached_assets/wordle_duo_functions_1755730047765.md":{"content":"# 🎮 WORDLE DUO - OYUN FONKSİYONLARI VE DİNAMİKLERİ\n\n## 1. ANA MENÜ SİSTEMİ\n\n### 1.1 Ana Menü Fonksiyonları\n```javascript\n// Ana menü state management\nconst [menuState, setMenuState] = useState('main'); // 'main', 'create', 'join'\nconst [playerName, setPlayerName] = useState('');\n\n// Menü navigasyonu\nfunction navigateToCreateRoom() {\n  setMenuState('create');\n}\n\nfunction navigateToJoinRoom() {\n  setMenuState('join');\n}\n\nfunction returnToMain() {\n  setMenuState('main');\n}\n```\n\n### 1.2 Oyuncu Kimlik Sistemi\n```javascript\n// Oyuncu bilgileri\nconst playerData = {\n  id: generateUniqueId(),\n  name: playerName || 'Anonim Oyuncu',\n  avatar: generateRandomAvatar(),\n  joinTime: Date.now()\n};\n\n// Avatar sistemi\nconst avatars = ['👨‍💻', '👩‍🎨', '🧑‍🚀', '👩‍🔬', '🧑‍🎓', '👨‍🎤'];\nfunction generateRandomAvatar() {\n  return avatars[Math.floor(Math.random() * avatars.length)];\n}\n```\n\n## 2. ODA YÖNETİM SİSTEMİ\n\n### 2.1 Oda Oluşturma Fonksiyonları\n```javascript\n// Oda kodu üretimi\nfunction generateRoomCode() {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  let code = '';\n  for (let i = 0; i < 6; i++) {\n    code += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n  return code;\n}\n\n// Oda oluşturma\nasync function createRoom(gameMode) {\n  const roomCode = generateRoomCode();\n  const roomData = {\n    code: roomCode,\n    mode: gameMode, // 'sequential' veya 'duel'\n    host: playerData.id,\n    players: [playerData],\n    status: 'waiting', // 'waiting', 'playing', 'finished'\n    word: selectRandomWord(),\n    currentTurn: 0, // Sadece sequential modda kullanılır\n    createdAt: Date.now()\n  };\n  \n  await saveRoomToDatabase(roomCode, roomData);\n  return roomCode;\n}\n```\n\n### 2.2 Odaya Katılma Fonksiyonları\n```javascript\n// Oda kodunun geçerliliğini kontrol etme\nasync function validateRoomCode(code) {\n  const room = await getRoomFromDatabase(code);\n  if (!room) return { valid: false, message: 'Oda bulunamadı!' };\n  if (room.players.length >= 2) return { valid: false, message: 'Oda dolu!' };\n  if (room.status !== 'waiting') return { valid: false, message: 'Oyun zaten başlamış!' };\n  return { valid: true, room };\n}\n\n// Odaya katılma\nasync function joinRoom(roomCode) {\n  const validation = await validateRoomCode(roomCode);\n  if (!validation.valid) {\n    throw new Error(validation.message);\n  }\n  \n  const updatedRoom = {\n    ...validation.room,\n    players: [...validation.room.players, playerData],\n    status: 'playing'\n  };\n  \n  await updateRoomInDatabase(roomCode, updatedRoom);\n  return updatedRoom;\n}\n```\n\n### 2.3 Real-time Oda Senkronizasyonu\n```javascript\n// Firebase listener kurulum\nfunction setupRoomListener(roomCode, callback) {\n  const roomRef = firebase.database().ref(`rooms/${roomCode}`);\n  return roomRef.on('value', (snapshot) => {\n    const roomData = snapshot.val();\n    callback(roomData);\n  });\n}\n\n// Oda durumu güncelleme\nfunction updateRoomState(roomCode, updates) {\n  return firebase.database().ref(`rooms/${roomCode}`).update(updates);\n}\n```\n\n## 3. KELİME YÖNETİM SİSTEMİ\n\n### 3.1 Kelime Havuzu Sistemi\n```javascript\n// Türkçe 5 harfli kelime havuzu\nconst turkishWords = [\n  'ARABA', 'BALIK', 'CICEK', 'DAĞIR', 'ELMAS', 'FINCAN', 'GÜNEŞ',\n  'HAYAT', 'INSAN', 'JETON', 'KEDI', 'LIMAN', 'MASA', 'NEDEN',\n  'OKUL', 'PRENS', 'RAKAM', 'SAAT', 'TAKIM', 'UZMAN', 'VAGON',\n  'YAPIM', 'ZEMIN'\n  // ... daha fazla kelime\n];\n\n// Rastgele kelime seçimi\nfunction selectRandomWord() {\n  return turkishWords[Math.floor(Math.random() * turkishWords.length)];\n}\n\n// Kelime geçerliliği kontrolü\nfunction isValidWord(word) {\n  return turkishWords.includes(word.toUpperCase());\n}\n```\n\n### 3.2 Harf Kontrol Algoritmaları\n```javascript\n// Harf durumu kontrol sistemi\nfunction checkLetterStatus(guess, targetWord) {\n  const result = [];\n  const targetLetters = targetWord.split('');\n  const guessLetters = guess.split('');\n  \n  // İlk geçiş: Doğru pozisyondaki harfler (yeşil)\n  for (let i = 0; i < 5; i++) {\n    if (guessLetters[i] === targetLetters[i]) {\n      result[i] = 'correct';\n      targetLetters[i] = null; // İşaretli\n      guessLetters[i] = null;  // İşaretli\n    }\n  }\n  \n  // İkinci geçiş: Yanlış pozisyondaki harfler (sarı)\n  for (let i = 0; i < 5; i++) {\n    if (guessLetters[i] !== null) {\n      const foundIndex = targetLetters.findIndex(letter => letter === guessLetters[i]);\n      if (foundIndex !== -1) {\n        result[i] = 'present';\n        targetLetters[foundIndex] = null;\n      } else {\n        result[i] = 'absent';\n      }\n    }\n  }\n  \n  return result;\n}\n```\n\n## 4. SIRAYLA MODU DİNAMİKLERİ\n\n### 4.1 Sıra Yönetim Sistemi\n```javascript\n// Sıra state management\nconst [currentPlayerIndex, setCurrentPlayerIndex] = useState(0);\nconst [gameHistory, setGameHistory] = useState([]);\nconst [currentRow, setCurrentRow] = useState(0);\n\n// Sıra değiştirme\nfunction switchTurn(roomCode, roomData) {\n  const nextPlayerIndex = (roomData.currentTurn + 1) % 2;\n  \n  updateRoomState(roomCode, {\n    currentTurn: nextPlayerIndex,\n    lastMoveTime: Date.now()\n  });\n  \n  // Animasyon tetikleme\n  triggerTurnChangeAnimation(nextPlayerIndex);\n}\n\n// Aktif oyuncu kontrolü\nfunction isActivePlayer(playerId, roomData) {\n  return roomData.players[roomData.currentTurn].id === playerId;\n}\n```\n\n### 4.2 Dinamik Satır Ekleme Sistemi\n```javascript\n// Grid genişletme fonksiyonu\nfunction expandGrid(roomCode) {\n  const newRowData = {\n    row: currentRow + 1,\n    letters: ['', '', '', '', ''],\n    status: ['empty', 'empty', 'empty', 'empty', 'empty'],\n    playerId: null\n  };\n  \n  updateRoomState(roomCode, {\n    [`grid/row${currentRow + 1}`]: newRowData,\n    totalRows: currentRow + 2\n  });\n  \n  // Smooth scroll animasyonu\n  scrollToNewRow(currentRow + 1);\n  setCurrentRow(currentRow + 1);\n}\n\n// Otomatik scroll\nfunction scrollToNewRow(rowIndex) {\n  const rowElement = document.getElementById(`row-${rowIndex}`);\n  if (rowElement) {\n    rowElement.scrollIntoView({ \n      behavior: 'smooth', \n      block: 'center' \n    });\n  }\n}\n```\n\n### 4.3 Ortak Tahmin Tablosu Yönetimi\n```javascript\n// Tahmin geçmişi sistemi\nconst gameHistoryStructure = {\n  rows: [\n    {\n      rowIndex: 0,\n      playerId: 'player1_id',\n      playerName: 'Ahmet',\n      guess: 'ARABA',\n      result: ['correct', 'absent', 'present', 'correct', 'absent'],\n      timestamp: Date.now()\n    }\n  ]\n};\n\n// Tahmin ekleme\nfunction addGuessToHistory(roomCode, playerData, guess, result) {\n  const newGuess = {\n    rowIndex: currentRow,\n    playerId: playerData.id,\n    playerName: playerData.name,\n    playerAvatar: playerData.avatar,\n    guess: guess,\n    result: result,\n    timestamp: Date.now()\n  };\n  \n  updateRoomState(roomCode, {\n    [`gameHistory/${currentRow}`]: newGuess\n  });\n}\n```\n\n## 5. DÜELLO MODU DİNAMİKLERİ\n\n### 5.1 Ayrı Panel Sistemi\n```javascript\n// Düello modu state\nconst [player1Grid, setPlayer1Grid] = useState(initializeGrid());\nconst [player2Grid, setPlayer2Grid] = useState(initializeGrid());\nconst [player1Word, setPlayer1Word] = useState('');\nconst [player2Word, setPlayer2Word] = useState('');\n\n// Grid başlatma\nfunction initializeGrid() {\n  return Array(6).fill().map(() => ({\n    letters: ['', '', '', '', ''],\n    status: ['empty', 'empty', 'empty', 'empty', 'empty'],\n    submitted: false\n  }));\n}\n\n// Farklı kelime atama\nfunction assignDifferentWords(roomCode) {\n  const word1 = selectRandomWord();\n  let word2 = selectRandomWord();\n  \n  // Farklı kelimeler olduğundan emin ol\n  while (word1 === word2) {\n    word2 = selectRandomWord();\n  }\n  \n  updateRoomState(roomCode, {\n    player1Word: word1,\n    player2Word: word2\n  });\n}\n```\n\n### 5.2 Gizlilik Sistemi\n```javascript\n// Karşı oyuncunun tahminini gizleme\nfunction getVisibleGuess(guess, result, isOwnGuess) {\n  if (isOwnGuess) {\n    // Kendi tahminini tam olarak göster\n    return {\n      letters: guess,\n      colors: result\n    };\n  } else {\n    // Karşı oyuncunun tahminini sadece renklerle göster\n    return {\n      letters: ['■', '■', '■', '■', '■'], // Gizli bloklar\n      colors: result\n    };\n  }\n}\n\n// Real-time güncelleme\nfunction syncOpponentProgress(roomCode, playerId, guess, result) {\n  const hiddenResult = result; // Sadece renkler paylaşılır\n  \n  updateRoomState(roomCode, {\n    [`opponentProgress/${playerId}`]: {\n      colors: hiddenResult,\n      timestamp: Date.now()\n    }\n  });\n}\n```\n\n### 5.3 Eşzamanlı Yarış Sistemi\n```javascript\n// Yarış durumu takibi\nconst raceStatus = {\n  player1: {\n    currentRow: 0,\n    completed: false,\n    completionTime: null\n  },\n  player2: {\n    currentRow: 0,\n    completed: false,\n    completionTime: null\n  }\n};\n\n// Yarış sonucu belirleme\nfunction determineWinner(roomCode, raceStatus) {\n  const p1Complete = raceStatus.player1.completed;\n  const p2Complete = raceStatus.player2.completed;\n  \n  if (p1Complete && p2Complete) {\n    // İkisi de tamamladı - hız karşılaştırması\n    const winner = raceStatus.player1.completionTime < raceStatus.player2.completionTime \n      ? 'player1' : 'player2';\n    return { winner, reason: 'speed' };\n  } else if (p1Complete) {\n    return { winner: 'player1', reason: 'first_to_complete' };\n  } else if (p2Complete) {\n    return { winner: 'player2', reason: 'first_to_complete' };\n  }\n  \n  return { winner: null, reason: 'ongoing' };\n}\n```\n\n## 6. KLAVYE VE GİRİŞ SİSTEMİ\n\n### 6.1 Türkçe Klavye Düzeni\n```javascript\n// Türkçe klavye layout\nconst turkishKeyboard = [\n  ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P', 'Ğ', 'Ü'],\n  ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'Ş', 'İ'],\n  ['Z', 'X', 'C', 'V', 'B', 'N', 'M', 'Ö', 'Ç']\n];\n\n// Klavye durum yönetimi\nconst [keyboardStatus, setKeyboardStatus] = useState({});\n\n// Harf durumu güncelleme\nfunction updateKeyboardStatus(letter, status) {\n  setKeyboardStatus(prev => ({\n    ...prev,\n    [letter]: status // 'correct', 'present', 'absent'\n  }));\n}\n```\n\n### 6.2 Sıra Tabanlı Klavye Kontrolü\n```javascript\n// Klavye aktiflik kontrolü\nfunction isKeyboardActive(playerId, roomData) {\n  if (roomData.mode === 'sequential') {\n    return isActivePlayer(playerId, roomData);\n  } else {\n    // Düello modunda her zaman aktif\n    return true;\n  }\n}\n\n// Klavye deaktivasyonu\nfunction disableKeyboard() {\n  const keyboard = document.getElementById('game-keyboard');\n  keyboard.classList.add('disabled');\n  keyboard.style.pointerEvents = 'none';\n  keyboard.style.opacity = '0.5';\n}\n\nfunction enableKeyboard() {\n  const keyboard = document.getElementById('game-keyboard');\n  keyboard.classList.remove('disabled');\n  keyboard.style.pointerEvents = 'auto';\n  keyboard.style.opacity = '1';\n}\n```\n\n## 7. ANİMASYON SİSTEMİ\n\n### 7.1 Harf Animasyonları\n```javascript\n// Harf girişi animasyonu\nfunction animateLetterInput(cellElement, letter) {\n  cellElement.textContent = letter;\n  cellElement.style.transform = 'scale(1.1)';\n  cellElement.style.transition = 'transform 0.1s ease';\n  \n  setTimeout(() => {\n    cellElement.style.transform = 'scale(1)';\n  }, 100);\n}\n\n// Flip animasyonu\nfunction animateFlip(rowElement, results, delay = 0) {\n  const cells = rowElement.querySelectorAll('.letter-cell');\n  \n  cells.forEach((cell, index) => {\n    setTimeout(() => {\n      cell.style.transform = 'rotateX(90deg)';\n      \n      setTimeout(() => {\n        cell.classList.add(`status-${results[index]}`);\n        cell.style.transform = 'rotateX(0deg)';\n      }, 150);\n    }, index * 100 + delay);\n  });\n}\n```\n\n### 7.2 Sıra Değişim Animasyonları\n```javascript\n// Aktif oyuncu vurgu animasyonu\nfunction triggerTurnChangeAnimation(activePlayerIndex) {\n  // Eski aktif oyuncuyu söndür\n  document.querySelectorAll('.player-indicator').forEach(indicator => {\n    indicator.classList.remove('active');\n  });\n  \n  // Yeni aktif oyuncuyu yakı\n  const newActiveIndicator = document.getElementById(`player-${activePlayerIndex}`);\n  newActiveIndicator.classList.add('active');\n  \n  // Pulse efekti\n  newActiveIndicator.style.animation = 'pulse 0.5s ease-in-out';\n  setTimeout(() => {\n    newActiveIndicator.style.animation = '';\n  }, 500);\n}\n\n// Yeni satır animasyonu\nfunction animateNewRow(rowElement) {\n  rowElement.style.transform = 'translateY(-20px)';\n  rowElement.style.opacity = '0';\n  rowElement.style.transition = 'all 0.3s ease-out';\n  \n  setTimeout(() => {\n    rowElement.style.transform = 'translateY(0)';\n    rowElement.style.opacity = '1';\n  }, 50);\n}\n```\n\n### 7.3 Kazanma Animasyonları\n```javascript\n// Konfetti patlaması\nfunction triggerConfetti() {\n  // Canvas üzerinde konfetti animasyonu\n  const canvas = document.getElementById('confetti-canvas');\n  const ctx = canvas.getContext('2d');\n  \n  const confettiPieces = [];\n  for (let i = 0; i < 100; i++) {\n    confettiPieces.push({\n      x: Math.random() * canvas.width,\n      y: -10,\n      color: ['#E11D48', '#F59E0B', '#10B981', '#06B6D4'][Math.floor(Math.random() * 4)],\n      velocity: Math.random() * 3 + 1,\n      size: Math.random() * 5 + 2\n    });\n  }\n  \n  function animateConfetti() {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    \n    confettiPieces.forEach(piece => {\n      piece.y += piece.velocity;\n      ctx.fillStyle = piece.color;\n      ctx.fillRect(piece.x, piece.y, piece.size, piece.size);\n    });\n    \n    if (confettiPieces.some(piece => piece.y < canvas.height)) {\n      requestAnimationFrame(animateConfetti);\n    }\n  }\n  \n  animateConfetti();\n}\n```\n\n## 8. OYUN DURUM YÖNETİMİ\n\n### 8.1 Game State Machine\n```javascript\n// Oyun durumları\nconst gameStates = {\n  WAITING: 'waiting',\n  PLAYING: 'playing',\n  PAUSED: 'paused',\n  FINISHED: 'finished',\n  DISCONNECTED: 'disconnected'\n};\n\n// Durum değişim fonksiyonları\nfunction changeGameState(roomCode, newState, data = {}) {\n  updateRoomState(roomCode, {\n    status: newState,\n    stateData: data,\n    lastStateChange: Date.now()\n  });\n}\n\n// Oyun bitiş kontrolü\nfunction checkGameEnd(roomData, guess, result) {\n  const isCorrect = result.every(status => status === 'correct');\n  const isLastRow = roomData.mode === 'duel' ? \n    roomData.currentRow >= 5 : \n    roomData.totalRows >= 10; // Sıralı modda max 10 satır\n  \n  if (isCorrect) {\n    return { ended: true, reason: 'won', winner: getCurrentPlayer() };\n  } else if (isLastRow) {\n    return { ended: true, reason: 'failed', winner: null };\n  }\n  \n  return { ended: false };\n}\n```\n\n### 8.2 Bağlantı Durumu Yönetimi\n```javascript\n// Bağlantı takibi\nfunction setupConnectionMonitoring(roomCode) {\n  const connectedRef = firebase.database().ref('.info/connected');\n  \n  connectedRef.on('value', (snapshot) => {\n    if (snapshot.val() === false) {\n      handleDisconnection(roomCode);\n    } else {\n      handleReconnection(roomCode);\n    }\n  });\n}\n\n// Bağlantı kopma durumu\nfunction handleDisconnection(roomCode) {\n  updateRoomState(roomCode, {\n    [`players/${playerData.id}/status`]: 'disconnected',\n    [`players/${playerData.id}/lastSeen`]: Date.now()\n  });\n}\n\n// Tekrar bağlanma\nfunction handleReconnection(roomCode) {\n  updateRoomState(roomCode, {\n    [`players/${playerData.id}/status`]: 'online',\n    [`players/${playerData.id}/lastSeen`]: Date.now()\n  });\n}\n```\n\n## 9. ÖZEL ÖZELLİKLER\n\n### 9.1 Real-time Cursör Sistemi\n```javascript\n// Karşı oyuncunun yazdığı harfleri gösterme\nfunction showOpponentTyping(roomCode, playerId, currentInput) {\n  updateRoomState(roomCode, {\n    [`typing/${playerId}`]: {\n      input: currentInput,\n      timestamp: Date.now()\n    }\n  });\n}\n\n// Typing indicator\nfunction displayTypingIndicator(opponentInput) {\n  const indicator = document.getElementById('opponent-typing');\n  indicator.textContent = `Rakibiniz yazıyor: ${opponentInput}`;\n  indicator.style.opacity = '1';\n  \n  clearTimeout(typingTimeout);\n  typingTimeout = setTimeout(() => {\n    indicator.style.opacity = '0';\n  }, 2000);\n}\n```\n\n### 9.2 Emoji Reaksiyon Sistemi\n```javascript\n// Reaksiyon gönderme\nfunction sendReaction(roomCode, playerId, emoji) {\n  updateRoomState(roomCode, {\n    [`reactions/${playerId}`]: {\n      emoji: emoji,\n      timestamp: Date.now()\n    }\n  });\n}\n\n// Reaksiyon gösterme\nfunction displayReaction(playerId, emoji) {\n  const playerArea = document.getElementById(`player-area-${playerId}`);\n  const reactionElement = document.createElement('div');\n  reactionElement.className = 'reaction-bubble';\n  reactionElement.textContent = emoji;\n  \n  playerArea.appendChild(reactionElement);\n  \n  // Animasyon\n  reactionElement.style.animation = 'reactionPop 2s ease-out forwards';\n  \n  setTimeout(() => {\n    reactionElement.remove();\n  }, 2000);\n}\n```\n\n### 9.3 Başarı Sistemi\n```javascript\n// Başarı türleri\nconst achievements = {\n  PERFECT_GUESS: 'perfect_guess', // İlk tahminde doğru\n  LAST_SECOND: 'last_second',     // Son satırda doğru\n  SPEED_DEMON: 'speed_demon',     // 30 saniyede bitirme\n  LUCKY_GUESS: 'lucky_guess'      // Rastgele tahminle doğru\n};\n\n// Başarı kontrolü\nfunction checkAchievements(roomData, guess, result, timeTaken) {\n  const achievements = [];\n  \n  if (result.every(r => r === 'correct') && roomData.currentRow === 0) {\n    achievements.push('PERFECT_GUESS');\n  }\n  \n  if (timeTaken < 30000) { // 30 saniye\n    achievements.push('SPEED_DEMON');\n  }\n  \n  return achievements;\n}\n\n// Başarı animasyonu\nfunction displayAchievement(achievement) {\n  const achievementModal = document.getElementById('achievement-modal');\n  const achievementText = document.getElementById('achievement-text');\n  \n  achievementText.textContent = getAchievementText(achievement);\n  achievementModal.style.display = 'block';\n  achievementModal.style.animation = 'achievementSlide 3s ease-out forwards';\n}\n```\n\n## 10. HATA YÖNETİMİ VE GÜVENLİK\n\n### 10.1 Input Validasyonu\n```javascript\n// Güvenli input kontrolü\nfunction validateInput(input) {\n  // Sadece Türkçe harflere izin ver\n  const turkishLetters = /^[A-ZÇĞIİÖŞÜ]*$/;\n  \n  if (!turkishLetters.test(input.toUpperCase())) {\n    throw new Error('Sadece Türkçe harfler kullanabilirsiniz!');\n  }\n  \n  if (input.length !== 5) {\n    throw new Error('Kelime 5 harfli olmalıdır!');\n  }\n  \n  return input.toUpperCase();\n}\n\n// Rate limiting\nconst rateLimitMap = new Map();\n\nfunction checkRateLimit(playerId) {\n  const now = Date.now();\n  const playerLimit = rateLimitMap.get(playerId) || { count: 0, resetTime: now };\n  \n  if (now > playerLimit.resetTime) {\n    // Reset limit\n    rateLimitMap.set(playerId, { count: 1, resetTime: now + 60000 }); // 1 dakika\n    return true;\n  }\n  \n  if (playerLimit.count >= 10) { // 10 tahmin/dakika\n    return false;\n  }\n  \n  playerLimit.count++;\n  return true;\n}\n```\n\n### 10.2 Hata Durumu Yönetimi\n```javascript\n// Global hata yakalayıcı\nwindow.addEventListener('error', (event) => {\n  console.error('Oyun hatası:', event.error);\n  showErrorMessage('Beklenmeyen bir hata oluştu. Sayfa yenileniyor...');\n  \n  setTimeout(() => {\n    window.location.reload();\n  }, 3000);\n});\n\n// Hata mesajı gösterme\nfunction showErrorMessage(message, type = 'error') {\n  const errorContainer = document.getElementById('error-container');\n  const errorElement = document.createElement('div');\n  \n  errorElement.className = `error-message error-${type}`;\n  errorElement.textContent = message;\n  \n  errorContainer.appendChild(errorElement);\n  \n  setTimeout(() => {\n    errorElement.remove();\n  }, 5000);\n}\n\n// Network hata yönetimi\nfunction handleNetworkError(error) {\n  console.error('Network error:', error);\n  showErrorMessage('İnternet bağlantısı problemi. Yeniden deneniyor...');\n  \n  // Otomatik yeniden bağlanma\n  setTimeout(() => {\n    setupRoomListener(currentRoomCode, handleRoomUpdate);\n  }, 3000);\n}\n```\n\nBu fonksiyonlar ve dinamikler, WORDLE DUO oyununun tam işlevselliğini sağlayacak temel yapı taşlarını oluşturmaktadır.","size_bytes":19808},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client\n  const port = 5000;\n  server.listen(port, \"0.0.0.0\", () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1829},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\n\ninterface GameRoom {\n  code: string;\n  mode: 'sequential' | 'duel';\n  host: string;\n  players: any[];\n  status: 'waiting' | 'playing' | 'finished';\n  word: string;\n  player1Word?: string;\n  player2Word?: string;\n  currentTurn: number;\n  createdAt: number;\n  gameHistory: any[];\n  totalRows: number;\n}\n\n// In-memory storage for rooms\nconst gameRooms = new Map<string, GameRoom>();\nconst playerConnections = new Map<string, WebSocket>();\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Health check endpoint\n  app.get(\"/api/health\", (req, res) => {\n    res.json({ status: \"ok\", timestamp: Date.now() });\n  });\n\n  // Get room information\n  app.get(\"/api/room/:code\", (req, res) => {\n    const { code } = req.params;\n    const room = gameRooms.get(code.toUpperCase());\n    \n    if (!room) {\n      return res.status(404).json({ error: \"Room not found\" });\n    }\n    \n    res.json(room);\n  });\n\n  // Create HTTP server\n  const httpServer = createServer(app);\n\n  // Set up WebSocket server on a separate port\n  const wss = new WebSocketServer({ port: 3001, host: '0.0.0.0' });\n\n  wss.on('connection', (ws: WebSocket) => {\n    console.log('New WebSocket connection');\n\n    ws.on('message', (data: Buffer) => {\n      try {\n        const message = JSON.parse(data.toString());\n        handleWebSocketMessage(ws, message);\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n        ws.send(JSON.stringify({ type: 'error', message: 'Invalid message format' }));\n      }\n    });\n\n    ws.on('close', () => {\n      console.log('WebSocket connection closed');\n      // Remove player from connections\n      for (const [playerId, connection] of Array.from(playerConnections.entries())) {\n        if (connection === ws) {\n          playerConnections.delete(playerId);\n          // Update player status in rooms\n          for (const room of Array.from(gameRooms.values())) {\n            const player = room.players.find((p: any) => p.id === playerId);\n            if (player) {\n              player.status = 'disconnected';\n              player.lastSeen = Date.now();\n              broadcastToRoom(room.code, { type: 'room_update', room });\n            }\n          }\n          break;\n        }\n      }\n    });\n  });\n\n  function handleWebSocketMessage(ws: WebSocket, message: any) {\n    const { type, data } = message;\n\n    switch (type) {\n      case 'join_room':\n        handleJoinRoom(ws, data);\n        break;\n      case 'create_room':\n        handleCreateRoom(ws, data);\n        break;\n      case 'submit_guess':\n        handleSubmitGuess(ws, data);\n        break;\n      case 'player_reconnect':\n        handlePlayerReconnect(ws, data);\n        break;\n      default:\n        ws.send(JSON.stringify({ type: 'error', message: 'Unknown message type' }));\n    }\n  }\n\n  function handleCreateRoom(ws: WebSocket, data: any) {\n    const { roomCode, roomData, playerId } = data;\n    \n    gameRooms.set(roomCode, roomData);\n    playerConnections.set(playerId, ws);\n    \n    ws.send(JSON.stringify({ \n      type: 'room_created', \n      roomCode, \n      room: roomData \n    }));\n  }\n\n  function handleJoinRoom(ws: WebSocket, data: any) {\n    const { roomCode, player } = data;\n    const room = gameRooms.get(roomCode);\n    \n    if (!room) {\n      ws.send(JSON.stringify({ type: 'error', message: 'Room not found' }));\n      return;\n    }\n    \n    if (room.players.length >= 2) {\n      ws.send(JSON.stringify({ type: 'error', message: 'Room is full' }));\n      return;\n    }\n    \n    room.players.push(player);\n    room.status = 'playing';\n    playerConnections.set(player.id, ws);\n    gameRooms.set(roomCode, room);\n    \n    // Notify all players in the room\n    broadcastToRoom(roomCode, { type: 'room_update', room });\n    \n    ws.send(JSON.stringify({ \n      type: 'room_joined', \n      room \n    }));\n  }\n\n  function handleSubmitGuess(ws: WebSocket, data: any) {\n    const { roomCode, guess, playerId } = data;\n    const room = gameRooms.get(roomCode);\n    \n    if (!room) {\n      ws.send(JSON.stringify({ type: 'error', message: 'Room not found' }));\n      return;\n    }\n    \n    // Add guess to room history\n    room.gameHistory.push(guess);\n    \n    // Check if game is finished\n    if (guess.result.every((r: string) => r === 'correct')) {\n      room.status = 'finished';\n    } else if (room.mode === 'sequential') {\n      // Switch turns\n      room.currentTurn = (room.currentTurn + 1) % 2;\n      room.totalRows += 1;\n    }\n    \n    gameRooms.set(roomCode, room);\n    \n    // Broadcast updated room to all players\n    broadcastToRoom(roomCode, { type: 'room_update', room });\n  }\n\n  function handlePlayerReconnect(ws: WebSocket, data: any) {\n    const { playerId, roomCode } = data;\n    const room = gameRooms.get(roomCode);\n    \n    if (room) {\n      const player = room.players.find(p => p.id === playerId);\n      if (player) {\n        player.status = 'online';\n        player.lastSeen = Date.now();\n        playerConnections.set(playerId, ws);\n        \n        ws.send(JSON.stringify({ type: 'room_reconnected', room }));\n        broadcastToRoom(roomCode, { type: 'room_update', room });\n      }\n    }\n  }\n\n  function broadcastToRoom(roomCode: string, message: any) {\n    const room = gameRooms.get(roomCode);\n    if (!room) return;\n    \n    room.players.forEach(player => {\n      const connection = playerConnections.get(player.id);\n      if (connection && connection.readyState === WebSocket.OPEN) {\n        connection.send(JSON.stringify(message));\n      }\n    });\n  }\n\n  return httpServer;\n}\n","size_bytes":5723},"server/storage.ts":{"content":"import { users, type User, type InsertUser } from \"@shared/schema\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  currentId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.currentId = 1;\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentId++;\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1012},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path, { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createServer as createViteServer, createLogger, type ServerOptions } from \"vite\";\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions: ServerOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        __dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(__dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2409},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":533},"client/src/App.tsx":{"content":"import React, { Suspense } from 'react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { ErrorBoundary } from './components/WordleDuo/ErrorBoundary';\nimport { MainMenu } from './components/WordleDuo/MainMenu';\nimport { GameBoard } from './components/WordleDuo/GameBoard';\nimport { useGameState } from './hooks/useGameState';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport './styles/animations.css';\n\nconst queryClient = new QueryClient();\n\nfunction GameContainer() {\n  const gameState = useGameState();\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 text-white overflow-hidden\">\n      {/* Background Pattern */}\n      <div className=\"fixed inset-0 opacity-10\">\n        <div className=\"absolute inset-0\" style={{\n          backgroundImage: `radial-gradient(circle at 25% 25%, #ef4444 0%, transparent 50%),\n                           radial-gradient(circle at 75% 75%, #dc2626 0%, transparent 50%)`\n        }}></div>\n      </div>\n\n      <AnimatePresence mode=\"wait\">\n        {gameState.phase === 'menu' && (\n          <motion.div\n            key=\"menu\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -20 }}\n            transition={{ duration: 0.3 }}\n          >\n            <MainMenu />\n          </motion.div>\n        )}\n\n        {(gameState.phase === 'waiting' || gameState.phase === 'playing' || gameState.phase === 'finished') && (\n          <motion.div\n            key=\"game\"\n            initial={{ opacity: 0, scale: 0.95 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0, scale: 0.95 }}\n            transition={{ duration: 0.3 }}\n          >\n            <GameBoard />\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ErrorBoundary>\n        <Suspense fallback={\n          <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 flex items-center justify-center\">\n            <div className=\"text-white text-xl\">Yükleniyor...</div>\n          </div>\n        }>\n          <GameContainer />\n        </Suspense>\n      </ErrorBoundary>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2345},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n    width: 100vw;\n    height: 100vh;\n  }\n}\n\n#root {\n  width: 100%;\n  height: 100%;\n  position: fixed;\n}\n\ncanvas {\n  width: 100% !important;\n  height: 100% !important;\n  touch-action: none;\n}","size_bytes":427},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-is-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/useFirebase.tsx":{"content":"import { useEffect, useCallback } from 'react';\nimport firebase from '../lib/firebase';\nimport { GameRoom } from '../types/game';\n\nexport function useFirebase() {\n  const saveRoomToDatabase = useCallback(async (roomCode: string, roomData: GameRoom) => {\n    try {\n      await firebase.ref(`rooms/${roomCode}`).set(roomData);\n    } catch (error) {\n      console.error('Error saving room:', error);\n      throw new Error('Oda kaydedilemedi');\n    }\n  }, []);\n\n  const getRoomFromDatabase = useCallback(async (roomCode: string): Promise<GameRoom | null> => {\n    try {\n      const snapshot = await firebase.ref(`rooms/${roomCode}`).once('value');\n      return snapshot.val();\n    } catch (error) {\n      console.error('Error getting room:', error);\n      return null;\n    }\n  }, []);\n\n  const updateRoomInDatabase = useCallback(async (roomCode: string, updates: Partial<GameRoom>) => {\n    try {\n      await firebase.ref(`rooms/${roomCode}`).update(updates);\n    } catch (error) {\n      console.error('Error updating room:', error);\n      throw new Error('Oda güncellenemedi');\n    }\n  }, []);\n\n  const setupRoomListener = useCallback((roomCode: string, callback: (roomData: GameRoom | null) => void) => {\n    const roomRef = firebase.ref(`rooms/${roomCode}`);\n    const listener = (snapshot: any) => {\n      const roomData = snapshot.val();\n      callback(roomData);\n    };\n    \n    roomRef.on('value', listener);\n    \n    return () => roomRef.off('value', listener);\n  }, []);\n\n  return {\n    saveRoomToDatabase,\n    getRoomFromDatabase,\n    updateRoomInDatabase,\n    setupRoomListener\n  };\n}\n","size_bytes":1593},"client/src/hooks/useGameState.tsx":{"content":"import { create } from 'zustand';\nimport { subscribeWithSelector } from 'zustand/middleware';\nimport { GameState, Player, GameRoom, GameMode } from '../types/game';\nimport { generateUniqueId, generateRandomAvatar } from '../lib/gameLogic';\n\ninterface GameStore extends GameState {\n  // Actions\n  setPhase: (phase: GameState['phase']) => void;\n  setMode: (mode: GameMode) => void;\n  setPlayerData: (playerData: Player) => void;\n  setRoomCode: (roomCode: string) => void;\n  setRoomData: (roomData: GameRoom | null) => void;\n  setCurrentInput: (input: string) => void;\n  setCurrentRow: (row: number) => void;\n  setIsMyTurn: (isMyTurn: boolean) => void;\n  setKeyboardStatus: (status: Record<string, any>) => void;\n  setError: (error: string | null) => void;\n  createPlayer: (name: string) => Player;\n  resetGame: () => void;\n}\n\nconst initialState: GameState = {\n  phase: 'menu',\n  mode: null,\n  playerData: null,\n  roomCode: null,\n  roomData: null,\n  currentInput: '',\n  currentRow: 0,\n  isMyTurn: false,\n  keyboardStatus: {},\n  error: null\n};\n\nexport const useGameState = create<GameStore>()(\n  subscribeWithSelector((set, get) => ({\n    ...initialState,\n\n    setPhase: (phase) => set({ phase }),\n    setMode: (mode) => set({ mode }),\n    setPlayerData: (playerData) => set({ playerData }),\n    setRoomCode: (roomCode) => set({ roomCode }),\n    setRoomData: (roomData) => set({ roomData }),\n    setCurrentInput: (currentInput) => set({ currentInput }),\n    setCurrentRow: (currentRow) => set({ currentRow }),\n    setIsMyTurn: (isMyTurn) => set({ isMyTurn }),\n    setKeyboardStatus: (keyboardStatus) => set({ keyboardStatus }),\n    setError: (error) => set({ error }),\n\n    createPlayer: (name: string): Player => {\n      const player: Player = {\n        id: generateUniqueId(),\n        name: name || 'Anonim Oyuncu',\n        avatar: generateRandomAvatar(),\n        status: 'online',\n        joinTime: Date.now(),\n        lastSeen: Date.now()\n      };\n      set({ playerData: player });\n      return player;\n    },\n\n    resetGame: () => set({ ...initialState, playerData: get().playerData })\n  }))\n);\n","size_bytes":2097},"client/src/hooks/useWordleDuo.tsx":{"content":"import { useCallback, useEffect } from 'react';\nimport { useGameState } from './useGameState';\nimport { useFirebase } from './useFirebase';\nimport { GameRoom, GameMode, GuessHistory } from '../types/game';\nimport { \n  generateRoomCode, \n  checkLetterStatus, \n  validateInput, \n  updateKeyboardStatus \n} from '../lib/gameLogic';\nimport { selectRandomWord, selectDifferentWords, isValidWord } from '../lib/turkishWords';\n\nexport function useWordleDuo() {\n  const gameState = useGameState();\n  const {\n    setPhase,\n    setMode,\n    setRoomCode,\n    setRoomData,\n    setCurrentInput,\n    setCurrentRow,\n    setIsMyTurn,\n    setKeyboardStatus,\n    setError,\n    createPlayer\n  } = useGameState();\n\n  const {\n    saveRoomToDatabase,\n    getRoomFromDatabase,\n    updateRoomInDatabase,\n    setupRoomListener\n  } = useFirebase();\n\n  // Create a new room\n  const createRoom = useCallback(async (gameMode: GameMode, playerName: string) => {\n    try {\n      setError(null);\n      const player = createPlayer(playerName);\n      const roomCode = generateRoomCode();\n      \n      let word: string;\n      let player1Word: string | undefined;\n      let player2Word: string | undefined;\n      \n      if (gameMode === 'duel') {\n        [player1Word, player2Word] = selectDifferentWords();\n        word = player1Word; // Host gets first word\n      } else {\n        word = selectRandomWord();\n      }\n\n      const roomData: GameRoom = {\n        code: roomCode,\n        mode: gameMode,\n        host: player.id,\n        players: [player],\n        status: 'waiting',\n        word,\n        player1Word,\n        player2Word,\n        currentTurn: 0,\n        createdAt: Date.now(),\n        gameHistory: [],\n        totalRows: 1\n      };\n\n      await saveRoomToDatabase(roomCode, roomData);\n      \n      setMode(gameMode);\n      setRoomCode(roomCode);\n      setRoomData(roomData);\n      setPhase('waiting');\n      \n      return roomCode;\n    } catch (error) {\n      console.error('Error creating room:', error);\n      setError('Oda oluşturulamadı');\n      throw error;\n    }\n  }, [createPlayer, saveRoomToDatabase, setMode, setRoomCode, setRoomData, setPhase, setError]);\n\n  // Join an existing room\n  const joinRoom = useCallback(async (roomCode: string, playerName: string) => {\n    try {\n      setError(null);\n      const room = await getRoomFromDatabase(roomCode);\n      \n      if (!room) {\n        throw new Error('Oda bulunamadı!');\n      }\n      \n      if (room.players.length >= 2) {\n        throw new Error('Oda dolu!');\n      }\n      \n      if (room.status !== 'waiting') {\n        throw new Error('Oyun zaten başlamış!');\n      }\n\n      const player = createPlayer(playerName);\n      const updatedRoom: GameRoom = {\n        ...room,\n        players: [...room.players, player],\n        status: 'playing'\n      };\n\n      // In duel mode, assign second word to joining player\n      if (room.mode === 'duel' && room.player2Word) {\n        // Joining player gets the second word\n      }\n\n      await updateRoomInDatabase(roomCode, updatedRoom);\n      \n      setMode(room.mode);\n      setRoomCode(roomCode);\n      setRoomData(updatedRoom);\n      setPhase('playing');\n      \n      return updatedRoom;\n    } catch (error) {\n      console.error('Error joining room:', error);\n      setError(error instanceof Error ? error.message : 'Odaya katılamadı');\n      throw error;\n    }\n  }, [getRoomFromDatabase, createPlayer, updateRoomInDatabase, setMode, setRoomCode, setRoomData, setPhase, setError]);\n\n  // Submit a guess\n  const submitGuess = useCallback(async () => {\n    if (!gameState.roomCode || !gameState.roomData || !gameState.playerData) {\n      return;\n    }\n\n    try {\n      const input = validateInput(gameState.currentInput);\n      \n      if (!isValidWord(input)) {\n        throw new Error('Geçerli bir Türkçe kelime giriniz!');\n      }\n\n      const targetWord = gameState.roomData.mode === 'duel' \n        ? (gameState.playerData.id === gameState.roomData.host \n           ? gameState.roomData.player1Word || gameState.roomData.word\n           : gameState.roomData.player2Word || gameState.roomData.word)\n        : gameState.roomData.word;\n\n      const result = checkLetterStatus(input, targetWord);\n      \n      // Update keyboard status\n      const newKeyboardStatus = updateKeyboardStatus(\n        gameState.keyboardStatus,\n        input,\n        result\n      );\n      setKeyboardStatus(newKeyboardStatus);\n\n      // Create guess history entry\n      const guessEntry: GuessHistory = {\n        rowIndex: gameState.currentRow,\n        playerId: gameState.playerData.id,\n        playerName: gameState.playerData.name,\n        playerAvatar: gameState.playerData.avatar,\n        guess: input,\n        result,\n        timestamp: Date.now()\n      };\n\n      // Check if game is won\n      const isCorrect = result.every(status => status === 'correct');\n      \n      if (isCorrect) {\n        // Game won\n        const updates: Partial<GameRoom> = {\n          gameHistory: [...gameState.roomData.gameHistory, guessEntry],\n          status: 'finished'\n        };\n        \n        await updateRoomInDatabase(gameState.roomCode, updates);\n        setPhase('finished');\n      } else {\n        // Continue game\n        const updates: Partial<GameRoom> = {\n          gameHistory: [...gameState.roomData.gameHistory, guessEntry],\n          currentTurn: gameState.roomData.mode === 'sequential' \n            ? (gameState.roomData.currentTurn + 1) % 2 \n            : gameState.roomData.currentTurn,\n          totalRows: gameState.roomData.mode === 'sequential' \n            ? gameState.roomData.totalRows + 1 \n            : gameState.roomData.totalRows\n        };\n\n        await updateRoomInDatabase(gameState.roomCode, updates);\n        \n        if (gameState.roomData.mode === 'sequential') {\n          setCurrentRow(gameState.currentRow + 1);\n        }\n      }\n\n      setCurrentInput('');\n      \n    } catch (error) {\n      console.error('Error submitting guess:', error);\n      setError(error instanceof Error ? error.message : 'Tahmin gönderilemedi');\n    }\n  }, [\n    gameState,\n    updateRoomInDatabase,\n    setKeyboardStatus,\n    setPhase,\n    setCurrentRow,\n    setCurrentInput,\n    setError\n  ]);\n\n  // Handle keyboard input\n  const handleKeyPress = useCallback((key: string) => {\n    if (!gameState.roomData || !gameState.playerData) return;\n\n    // Check if it's player's turn (for sequential mode)\n    if (gameState.roomData.mode === 'sequential') {\n      const isMyTurn = gameState.roomData.players[gameState.roomData.currentTurn]?.id === gameState.playerData.id;\n      if (!isMyTurn) return;\n    }\n\n    if (key === 'ENTER') {\n      if (gameState.currentInput.length === 5) {\n        submitGuess();\n      }\n    } else if (key === 'BACKSPACE') {\n      setCurrentInput(gameState.currentInput.slice(0, -1));\n    } else if (gameState.currentInput.length < 5 && /^[A-ZÇĞIİÖŞÜ]$/.test(key)) {\n      setCurrentInput(gameState.currentInput + key);\n    }\n  }, [gameState, submitGuess, setCurrentInput]);\n\n  // Set up room listener\n  useEffect(() => {\n    if (!gameState.roomCode) return;\n\n    const unsubscribe = setupRoomListener(gameState.roomCode, (roomData) => {\n      if (roomData) {\n        setRoomData(roomData);\n        \n        // Update turn indicator\n        if (roomData.mode === 'sequential' && gameState.playerData) {\n          const isMyTurn = roomData.players[roomData.currentTurn]?.id === gameState.playerData.id;\n          setIsMyTurn(isMyTurn);\n        }\n        \n        // Check game phase\n        if (roomData.status === 'finished' && gameState.phase !== 'finished') {\n          setPhase('finished');\n        }\n      }\n    });\n\n    return unsubscribe;\n  }, [gameState.roomCode, gameState.playerData, gameState.phase, setupRoomListener, setRoomData, setIsMyTurn, setPhase]);\n\n  return {\n    gameState,\n    createRoom,\n    joinRoom,\n    submitGuess,\n    handleKeyPress,\n    setError,\n    resetGame: () => setPhase('menu')\n  };\n}\n","size_bytes":7940},"client/src/lib/firebase.ts":{"content":"// Firebase configuration - using environment variables\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY || \"demo-api-key\",\n  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN || \"wordle-duo-demo.firebaseapp.com\",\n  databaseURL: import.meta.env.VITE_FIREBASE_DATABASE_URL || \"https://wordle-duo-demo-default-rtdb.firebaseio.com\",\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID || \"wordle-duo-demo\",\n  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET || \"wordle-duo-demo.appspot.com\",\n  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID || \"123456789\",\n  appId: import.meta.env.VITE_FIREBASE_APP_ID || \"1:123456789:web:demo\"\n};\n\n// Mock Firebase implementation for development\nclass MockFirebase {\n  private rooms: Map<string, any> = new Map();\n  private listeners: Map<string, Function[]> = new Map();\n\n  async init() {\n    console.log('Firebase initialized (mock mode)');\n  }\n\n  ref(path: string) {\n    return {\n      set: async (data: any) => {\n        this.rooms.set(path, data);\n        this.notifyListeners(path, data);\n      },\n      update: async (data: any) => {\n        const existing = this.rooms.get(path) || {};\n        const updated = { ...existing, ...data };\n        this.rooms.set(path, updated);\n        this.notifyListeners(path, updated);\n      },\n      on: (event: string, callback: Function) => {\n        if (!this.listeners.has(path)) {\n          this.listeners.set(path, []);\n        }\n        this.listeners.get(path)!.push(callback);\n        \n        // Immediately call with existing data\n        const data = this.rooms.get(path);\n        if (data) {\n          callback({ val: () => data });\n        }\n        \n        return callback;\n      },\n      off: (event: string, callback: Function) => {\n        const pathListeners = this.listeners.get(path);\n        if (pathListeners) {\n          const index = pathListeners.indexOf(callback);\n          if (index > -1) {\n            pathListeners.splice(index, 1);\n          }\n        }\n      },\n      once: async (event: string) => {\n        const data = this.rooms.get(path);\n        return { val: () => data };\n      }\n    };\n  }\n\n  private notifyListeners(path: string, data: any) {\n    const listeners = this.listeners.get(path) || [];\n    listeners.forEach(listener => {\n      listener({ val: () => data });\n    });\n  }\n\n  database() {\n    return {\n      ref: (path: string) => this.ref(path)\n    };\n  }\n}\n\nexport const firebase = new MockFirebase();\n\n// Initialize Firebase\nfirebase.init();\n\nexport default firebase;\n","size_bytes":2562},"client/src/lib/gameLogic.ts":{"content":"import { LetterStatus } from '../types/game';\n\nexport function checkLetterStatus(guess: string, targetWord: string): LetterStatus[] {\n  const result: LetterStatus[] = [];\n  const targetLetters = targetWord.split('');\n  const guessLetters = guess.split('');\n  \n  // First pass: Mark correct positions (green)\n  for (let i = 0; i < 5; i++) {\n    if (guessLetters[i] === targetLetters[i]) {\n      result[i] = 'correct';\n      targetLetters[i] = ''; // Mark as used\n      guessLetters[i] = ''; // Mark as processed\n    }\n  }\n  \n  // Second pass: Mark present but wrong position (yellow)\n  for (let i = 0; i < 5; i++) {\n    if (guessLetters[i] !== '') {\n      const foundIndex = targetLetters.findIndex(letter => letter === guessLetters[i]);\n      if (foundIndex !== -1) {\n        result[i] = 'present';\n        targetLetters[foundIndex] = ''; // Mark as used\n      } else {\n        result[i] = 'absent';\n      }\n    }\n  }\n  \n  return result;\n}\n\nexport function generateRoomCode(): string {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  let code = '';\n  for (let i = 0; i < 6; i++) {\n    code += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n  return code;\n}\n\nexport function generateUniqueId(): string {\n  return Math.random().toString(36).substr(2, 9) + Date.now().toString(36);\n}\n\nexport function generateRandomAvatar(): string {\n  const avatars = ['👨‍💻', '👩‍🎨', '🧑‍🚀', '👩‍🔬', '🧑‍🎓', '👨‍🎤', '👩‍💼', '🧑‍🎯'];\n  return avatars[Math.floor(Math.random() * avatars.length)];\n}\n\nexport function validateInput(input: string): string {\n  // Turkish letters regex\n  const turkishLetters = /^[A-ZÇĞIİÖŞÜ]*$/;\n  \n  if (!turkishLetters.test(input.toUpperCase())) {\n    throw new Error('Sadece Türkçe harfler kullanabilirsiniz!');\n  }\n  \n  if (input.length !== 5) {\n    throw new Error('Kelime 5 harfli olmalıdır!');\n  }\n  \n  return input.toUpperCase();\n}\n\nexport function updateKeyboardStatus(\n  currentStatus: Record<string, LetterStatus>,\n  guess: string,\n  result: LetterStatus[]\n): Record<string, LetterStatus> {\n  const newStatus = { ...currentStatus };\n  \n  for (let i = 0; i < guess.length; i++) {\n    const letter = guess[i];\n    const status = result[i];\n    \n    // Only update if new status is better than current\n    if (!newStatus[letter] || \n        (newStatus[letter] === 'absent' && status !== 'absent') ||\n        (newStatus[letter] === 'present' && status === 'correct')) {\n      newStatus[letter] = status;\n    }\n  }\n  \n  return newStatus;\n}\n","size_bytes":2545},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/turkishWords.ts":{"content":"// Comprehensive Turkish 5-letter word list\nexport const turkishWords = [\n  'ARABA', 'BALIK', 'CICEK', 'DAĞIR', 'ELMAS', 'FINCAN', 'GÜNEŞ', 'HAYAT',\n  'INSAN', 'JETON', 'KAĞIT', 'LIMAN', 'MASA', 'NEDEN', 'OKUL', 'PRENS',\n  'RAKAM', 'SAAT', 'TAKIM', 'UZMAN', 'VAGON', 'YAPIM', 'ZEMIN', 'AÇMAK',\n  'BAKAN', 'CEKET', 'DOĞRU', 'EMLEK', 'FAKAT', 'GIDER', 'HABER', 'IŞLIK',\n  'JILET', 'KAHVE', 'LADIN', 'MASAL', 'NABIZ', 'OĞLAN', 'PAKET', 'RESIM',\n  'SAĞIR', 'TABAN', 'UÇMAK', 'VAKIT', 'YALAN', 'ZAMAN', 'ADRES', 'BEKAR',\n  'ÇEVRE', 'DENIM', 'EVREN', 'FAŞOS', 'GIZEM', 'HAFTA', 'İDARE', 'JÖLEN',\n  'KAYAK', 'LEZIZ', 'MADEN', 'NASIL', 'ORGAN', 'PERDE', 'RADYO', 'SINIF',\n  'TEMEL', 'UYGUN', 'VICIK', 'YOKSA', 'ZATEN', 'AFIŞ', 'BELLI', 'ÇIZGI',\n  'DESTE', 'ESNEK', 'FAZLA', 'GÖMLEK', 'HIZLI', 'İNEK', 'JÜRI', 'KURAL',\n  'LÜZUM', 'MORAL', 'NOKTA', 'OTEL', 'PILOT', 'RENK', 'SPOR', 'TEKNE',\n  'ÜRÜN', 'VİZE', 'YAŞAM', 'ZORLU', 'AKTÖR', 'BAHÇE', 'ÇOCUK', 'DOYUM',\n  'ELBIS', 'FOTON', 'GÖREV', 'HUKUK', 'İVME', 'JIGOLO', 'KABIN', 'LOKAL',\n  'MEVKI', 'NINNI', 'OĞUL', 'PASTA', 'RITIM', 'SOSYAL', 'TARIH', 'UYARI',\n  'VİRÜS', 'YAVAŞ', 'ZEHIR', 'ARAMA', 'BONUS', 'ÇİÇEK', 'DURUM', 'EKONOM',\n  'FORUM', 'GARIP', 'HAMUR', 'İKLİM', 'JOKER', 'KARMA', 'LİSTE', 'MODEL',\n  'NÜFUS', 'OKYANUS', 'PROJE', 'ROBOT', 'SORU', 'TIYATRO', 'ULUSAL', 'VODKA',\n  'YATIR', 'ZORLUK', 'ASKER', 'BOMBA', 'ÇANTA', 'DEVAM', 'ERKEK', 'FOTOĞRAF',\n  'GENÇLIK', 'HASTA', 'İÇKİ', 'JAPON', 'KADIN', 'LIDER', 'METAL', 'NETICE',\n  'OLAY', 'PARTI', 'RADKAL', 'SORUN', 'TEMA', 'ULUS', 'VERİ', 'YAZIK'\n];\n\nexport function selectRandomWord(): string {\n  return turkishWords[Math.floor(Math.random() * turkishWords.length)];\n}\n\nexport function isValidWord(word: string): boolean {\n  return turkishWords.includes(word.toUpperCase());\n}\n\nexport function selectDifferentWords(): [string, string] {\n  const word1 = selectRandomWord();\n  let word2 = selectRandomWord();\n  \n  while (word1 === word2) {\n    word2 = selectRandomWord();\n  }\n  \n  return [word1, word2];\n}\n","size_bytes":2057},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nconst getLocalStorage = (key: string): any =>\n  JSON.parse(window.localStorage.getItem(key) || \"null\");\nconst setLocalStorage = (key: string, value: any): void =>\n  window.localStorage.setItem(key, JSON.stringify(value));\n\nexport { getLocalStorage, setLocalStorage };\n","size_bytes":438},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/styles/animations.css":{"content":"/* Wordle Duo Animations */\n\n@keyframes flip {\n  0% {\n    transform: rotateX(0);\n  }\n  50% {\n    transform: rotateX(90deg);\n  }\n  100% {\n    transform: rotateX(0);\n  }\n}\n\n@keyframes pulse {\n  0%, 100% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.05);\n  }\n}\n\n@keyframes shake {\n  0%, 100% {\n    transform: translateX(0);\n  }\n  10%, 30%, 50%, 70%, 90% {\n    transform: translateX(-2px);\n  }\n  20%, 40%, 60%, 80% {\n    transform: translateX(2px);\n  }\n}\n\n@keyframes bounceIn {\n  0% {\n    transform: scale(0.3);\n    opacity: 0;\n  }\n  50% {\n    transform: scale(1.05);\n  }\n  70% {\n    transform: scale(0.9);\n  }\n  100% {\n    transform: scale(1);\n    opacity: 1;\n  }\n}\n\n@keyframes slideUp {\n  from {\n    transform: translateY(20px);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n\n@keyframes glow {\n  0%, 100% {\n    box-shadow: 0 0 5px rgba(239, 68, 68, 0.5);\n  }\n  50% {\n    box-shadow: 0 0 20px rgba(239, 68, 68, 0.8);\n  }\n}\n\n@keyframes reactionPop {\n  0% {\n    transform: scale(0) translateY(0);\n    opacity: 1;\n  }\n  20% {\n    transform: scale(1.2) translateY(-10px);\n  }\n  100% {\n    transform: scale(0.8) translateY(-50px);\n    opacity: 0;\n  }\n}\n\n@keyframes achievementSlide {\n  0% {\n    transform: translateX(100%);\n    opacity: 0;\n  }\n  20%, 80% {\n    transform: translateX(0);\n    opacity: 1;\n  }\n  100% {\n    transform: translateX(100%);\n    opacity: 0;\n  }\n}\n\n.flip-animation {\n  animation: flip 0.6s ease-in-out;\n}\n\n.pulse-animation {\n  animation: pulse 0.5s ease-in-out;\n}\n\n.shake-animation {\n  animation: shake 0.5s ease-in-out;\n}\n\n.bounce-in {\n  animation: bounceIn 0.6s ease-in-out;\n}\n\n.slide-up {\n  animation: slideUp 0.3s ease-out;\n}\n\n.glow-animation {\n  animation: glow 2s ease-in-out infinite;\n}\n\n/* Letter cell animations */\n.letter-cell {\n  transition: all 0.2s ease-in-out;\n}\n\n.letter-cell.correct {\n  background: linear-gradient(135deg, #10b981, #059669);\n  color: white;\n  border-color: #059669;\n}\n\n.letter-cell.present {\n  background: linear-gradient(135deg, #f59e0b, #d97706);\n  color: white;\n  border-color: #d97706;\n}\n\n.letter-cell.absent {\n  background: linear-gradient(135deg, #6b7280, #4b5563);\n  color: white;\n  border-color: #4b5563;\n}\n\n.letter-cell.empty {\n  background: rgba(255, 255, 255, 0.05);\n  border-color: rgba(255, 255, 255, 0.2);\n}\n\n/* Keyboard key animations */\n.keyboard-key {\n  transition: all 0.15s ease-in-out;\n}\n\n.keyboard-key:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n}\n\n.keyboard-key:active {\n  transform: translateY(0);\n}\n\n.keyboard-key.correct {\n  background: linear-gradient(135deg, #10b981, #059669);\n  border-color: #059669;\n}\n\n.keyboard-key.present {\n  background: linear-gradient(135deg, #f59e0b, #d97706);\n  border-color: #d97706;\n}\n\n.keyboard-key.absent {\n  background: linear-gradient(135deg, #6b7280, #4b5563);\n  border-color: #4b5563;\n}\n\n/* Glass morphism effects */\n.glass-card {\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);\n}\n\n.glass-button {\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(5px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  transition: all 0.3s ease;\n}\n\n.glass-button:hover {\n  background: rgba(255, 255, 255, 0.2);\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);\n}\n\n/* Turkish flag colors */\n.turkish-red {\n  background: linear-gradient(135deg, #e11d48, #be185d);\n}\n\n.turkish-red-border {\n  border-color: #e11d48;\n}\n\n/* Confetti animation */\n@keyframes confetti-fall {\n  0% {\n    transform: translateY(-100vh) rotate(0deg);\n    opacity: 1;\n  }\n  100% {\n    transform: translateY(100vh) rotate(720deg);\n    opacity: 0;\n  }\n}\n\n.confetti {\n  animation: confetti-fall 3s linear infinite;\n}\n","size_bytes":3820},"client/src/types/game.ts":{"content":"export type GamePhase = 'menu' | 'waiting' | 'playing' | 'finished';\nexport type GameMode = 'sequential' | 'duel';\nexport type LetterStatus = 'empty' | 'correct' | 'present' | 'absent';\n\nexport interface Player {\n  id: string;\n  name: string;\n  avatar: string;\n  status: 'online' | 'disconnected';\n  joinTime: number;\n  lastSeen: number;\n}\n\nexport interface GameRoom {\n  code: string;\n  mode: GameMode;\n  host: string;\n  players: Player[];\n  status: 'waiting' | 'playing' | 'finished';\n  word: string;\n  player1Word?: string;\n  player2Word?: string;\n  currentTurn: number;\n  createdAt: number;\n  gameHistory: GuessHistory[];\n  totalRows: number;\n}\n\nexport interface GuessHistory {\n  rowIndex: number;\n  playerId: string;\n  playerName: string;\n  playerAvatar: string;\n  guess: string;\n  result: LetterStatus[];\n  timestamp: number;\n}\n\nexport interface GameState {\n  phase: GamePhase;\n  mode: GameMode | null;\n  playerData: Player | null;\n  roomCode: string | null;\n  roomData: GameRoom | null;\n  currentInput: string;\n  currentRow: number;\n  isMyTurn: boolean;\n  keyboardStatus: Record<string, LetterStatus>;\n  error: string | null;\n}\n\nexport interface LetterCell {\n  letter: string;\n  status: LetterStatus;\n  playerId?: string;\n}\n\nexport interface GameGrid {\n  rows: LetterCell[][];\n}\n","size_bytes":1285},"client/src/components/WordleDuo/DuelMode.tsx":{"content":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { useWordleDuo } from '../../hooks/useWordleDuo';\nimport { LetterGrid } from './LetterGrid';\n\nexport function DuelMode() {\n  const { gameState } = useWordleDuo();\n\n  if (!gameState.roomData || !gameState.playerData) return null;\n\n  // Separate grids for each player\n  const player1 = gameState.roomData.players[0];\n  const player2 = gameState.roomData.players[1];\n  const isPlayer1 = gameState.playerData.id === player1?.id;\n\n  // Get player's own guesses\n  const myGuesses = gameState.roomData.gameHistory.filter(\n    (h: any) => h.playerId === gameState.playerData.id\n  );\n\n  // Get opponent's guesses (only colors, not letters)\n  const opponentGuesses = gameState.roomData.gameHistory.filter(\n    (h: any) => h.playerId !== gameState.playerData.id\n  );\n\n  // Create 6 rows for each player\n  const createPlayerGrid = (guesses: any[], showLetters: boolean) => {\n    const rows = [];\n    \n    for (let i = 0; i < 6; i++) {\n      const guess = guesses[i];\n      if (guess) {\n        const letters = showLetters ? guess.guess.split('') : ['■', '■', '■', '■', '■'];\n        rows.push({\n          letters,\n          statuses: guess.result,\n          animate: true\n        });\n      } else if (i === guesses.length && showLetters && gameState.currentInput) {\n        // Current input row\n        const letters = gameState.currentInput.padEnd(5, ' ').split('');\n        rows.push({\n          letters,\n          statuses: Array(5).fill('empty'),\n          animate: false\n        });\n      } else {\n        // Empty row\n        rows.push({\n          letters: ['', '', '', '', ''],\n          statuses: Array(5).fill('empty'),\n          animate: false\n        });\n      }\n    }\n    \n    return rows;\n  };\n\n  const myGrid = createPlayerGrid(myGuesses, true);\n  const opponentGrid = createPlayerGrid(opponentGuesses, false);\n\n  return (\n    <div className=\"flex-1 p-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Mode Header */}\n        <div className=\"text-center mb-6\">\n          <div className=\"glass-card rounded-2xl p-4\">\n            <h3 className=\"text-lg font-bold text-white mb-2\">🏆 Düello Modu</h3>\n            <p className=\"text-gray-300 text-sm\">\n              Farklı kelimelerle yarışın! Kim önce bulursa kazanır.\n            </p>\n          </div>\n        </div>\n\n        {/* Dual Grid Layout */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* My Grid */}\n          <motion.div\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            className=\"space-y-4\"\n          >\n            <div className=\"glass-card rounded-2xl p-4\">\n              <div className=\"flex items-center justify-center space-x-2 mb-4\">\n                <span className=\"text-2xl\">{gameState.playerData.avatar}</span>\n                <span className=\"text-white font-bold\">{gameState.playerData.name}</span>\n                <span className=\"text-green-400\">👤</span>\n              </div>\n              \n              <div className=\"space-y-2\">\n                {myGrid.map((row, index) => (\n                  <LetterGrid\n                    key={index}\n                    letters={row.letters}\n                    statuses={row.statuses}\n                    animate={row.animate}\n                  />\n                ))}\n              </div>\n            </div>\n          </motion.div>\n\n          {/* Opponent Grid */}\n          <motion.div\n            initial={{ opacity: 0, x: 20 }}\n            animate={{ opacity: 1, x: 0 }}\n            className=\"space-y-4\"\n          >\n            <div className=\"glass-card rounded-2xl p-4\">\n              <div className=\"flex items-center justify-center space-x-2 mb-4\">\n                <span className=\"text-2xl\">{player2?.avatar || '👤'}</span>\n                <span className=\"text-white font-bold\">{player2?.name || 'Oyuncu 2'}</span>\n                <span className=\"text-red-400\">🔥</span>\n              </div>\n              \n              <div className=\"space-y-2\">\n                {opponentGrid.map((row, index) => (\n                  <LetterGrid\n                    key={index}\n                    letters={row.letters}\n                    statuses={row.statuses}\n                    animate={row.animate}\n                  />\n                ))}\n              </div>\n            </div>\n          </motion.div>\n        </div>\n\n        {/* Progress Indicators */}\n        <div className=\"mt-6 grid grid-cols-1 lg:grid-cols-2 gap-4\">\n          <div className=\"glass-card rounded-xl p-3 text-center\">\n            <div className=\"text-sm text-gray-300\">İlerlemeniz</div>\n            <div className=\"text-2xl font-bold text-white\">\n              {myGuesses.length} / 6\n            </div>\n          </div>\n          \n          <div className=\"glass-card rounded-xl p-3 text-center\">\n            <div className=\"text-sm text-gray-300\">Rakip İlerlemesi</div>\n            <div className=\"text-2xl font-bold text-white\">\n              {opponentGuesses.length} / 6\n            </div>\n          </div>\n        </div>\n\n        {/* Instructions */}\n        <div className=\"mt-4 text-center text-gray-400 text-sm\">\n          <p>Rakibinizin tahminlerini sadece renk kodları ile görebilirsiniz</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5334},"client/src/components/WordleDuo/ErrorBoundary.tsx":{"content":"import React, { Component, ErrorInfo, ReactNode } from 'react';\n\ninterface Props {\n  children: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  error?: Error;\n}\n\nexport class ErrorBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): State {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error('Oyun hatası:', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 flex items-center justify-center p-4\">\n          <div className=\"glass-card rounded-2xl p-8 max-w-md text-center text-white\">\n            <div className=\"text-6xl mb-4\">😅</div>\n            <h2 className=\"text-2xl font-bold mb-4\">Bir şeyler ters gitti!</h2>\n            <p className=\"text-gray-300 mb-6\">\n              Beklenmeyen bir hata oluştu. Sayfayı yenilemeyi deneyin.\n            </p>\n            <button\n              onClick={() => window.location.reload()}\n              className=\"glass-button px-6 py-3 rounded-lg text-white font-medium hover:scale-105 transition-transform\"\n            >\n              Sayfayı Yenile\n            </button>\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n","size_bytes":1435},"client/src/components/WordleDuo/GameBoard.tsx":{"content":"import React, { useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useWordleDuo } from '../../hooks/useWordleDuo';\nimport { PlayerIndicator } from './PlayerIndicator';\nimport { SequentialMode } from './SequentialMode';\nimport { DuelMode } from './DuelMode';\nimport { TurkishKeyboard } from './TurkishKeyboard';\nimport { WinScreen } from './WinScreen';\n\nexport function GameBoard() {\n  const { gameState, handleKeyPress, resetGame } = useWordleDuo();\n\n  // Handle physical keyboard input\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      const key = event.key.toUpperCase();\n      \n      if (key === 'ENTER') {\n        handleKeyPress('ENTER');\n      } else if (key === 'BACKSPACE') {\n        handleKeyPress('BACKSPACE');\n      } else if (/^[A-ZÇĞIİÖŞÜ]$/.test(key)) {\n        handleKeyPress(key);\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [handleKeyPress]);\n\n  if (!gameState.roomData || !gameState.playerData) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-white text-xl\">Oyun yükleniyor...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      {/* Header */}\n      <div className=\"p-4 border-b border-white/10\">\n        <div className=\"max-w-6xl mx-auto flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <h1 className=\"text-2xl font-bold text-white\">WORDLE DUO</h1>\n            <div className=\"glass-card px-3 py-1 rounded-lg\">\n              <span className=\"text-sm text-gray-300\">Oda: </span>\n              <span className=\"text-sm font-mono text-white\">{gameState.roomCode}</span>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <PlayerIndicator />\n            <button\n              onClick={resetGame}\n              className=\"glass-button px-4 py-2 rounded-lg text-white text-sm hover:scale-105 transition-transform\"\n            >\n              Ana Menü\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Game Content */}\n      <div className=\"flex-1 flex flex-col\">\n        {gameState.phase === 'waiting' && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"flex-1 flex items-center justify-center\"\n          >\n            <div className=\"text-center\">\n              <div className=\"text-6xl mb-4\">⏳</div>\n              <h2 className=\"text-3xl font-bold text-white mb-4\">Oyuncu Bekleniyor</h2>\n              <p className=\"text-gray-300 mb-6\">\n                Arkadaşınızın katılmasını bekleyin...\n              </p>\n              <div className=\"glass-card p-6 rounded-2xl\">\n                <p className=\"text-sm text-gray-300 mb-2\">Oda Kodu:</p>\n                <p className=\"text-3xl font-mono font-bold text-white tracking-widest\">\n                  {gameState.roomCode}\n                </p>\n                <p className=\"text-xs text-gray-400 mt-2\">\n                  Bu kodu arkadaşınızla paylaşın\n                </p>\n              </div>\n            </div>\n          </motion.div>\n        )}\n\n        {gameState.phase === 'playing' && (\n          <div className=\"flex-1 flex flex-col\">\n            {gameState.roomData.mode === 'sequential' ? (\n              <SequentialMode />\n            ) : (\n              <DuelMode />\n            )}\n            \n            {/* Keyboard */}\n            <div className=\"p-4 border-t border-white/10\">\n              <div className=\"max-w-2xl mx-auto\">\n                <TurkishKeyboard\n                  onKeyPress={handleKeyPress}\n                  keyboardStatus={gameState.keyboardStatus}\n                  disabled={\n                    gameState.roomData.mode === 'sequential' && !gameState.isMyTurn\n                  }\n                />\n              </div>\n            </div>\n          </div>\n        )}\n\n        {gameState.phase === 'finished' && <WinScreen />}\n      </div>\n\n      {/* Error Display */}\n      <AnimatePresence>\n        {gameState.error && (\n          <motion.div\n            initial={{ opacity: 0, y: 50 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: 50 }}\n            className=\"fixed bottom-4 left-4 right-4 max-w-md mx-auto\"\n          >\n            <div className=\"bg-red-500/20 border border-red-500/30 rounded-xl p-4 text-red-300 text-center\">\n              {gameState.error}\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n","size_bytes":4727},"client/src/components/WordleDuo/GameModeSelector.tsx":{"content":"import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { useWordleDuo } from '../../hooks/useWordleDuo';\nimport { GameMode } from '../../types/game';\n\ninterface GameModeSelectorProps {\n  onBack: () => void;\n}\n\nexport function GameModeSelector({ onBack }: GameModeSelectorProps) {\n  const [playerName, setPlayerName] = useState('');\n  const [selectedMode, setSelectedMode] = useState<GameMode | null>(null);\n  const [isCreating, setIsCreating] = useState(false);\n  const { createRoom, gameState } = useWordleDuo();\n\n  const handleCreateRoom = async () => {\n    if (!selectedMode || !playerName.trim()) return;\n\n    setIsCreating(true);\n    try {\n      await createRoom(selectedMode, playerName.trim());\n    } catch (error) {\n      console.error('Error creating room:', error);\n    } finally {\n      setIsCreating(false);\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: { opacity: 1, y: 0 }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4\">\n      <motion.div\n        initial={{ opacity: 0, scale: 0.95 }}\n        animate={{ opacity: 1, scale: 1 }}\n        transition={{ duration: 0.3 }}\n        className=\"w-full max-w-2xl\"\n      >\n        <div className=\"glass-card rounded-3xl p-8\">\n          <div className=\"flex items-center mb-8\">\n            <button\n              onClick={onBack}\n              className=\"mr-4 p-2 rounded-lg hover:bg-white/10 transition-colors\"\n            >\n              <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n              </svg>\n            </button>\n            <h2 className=\"text-3xl font-bold text-white\">Oda Oluştur</h2>\n          </div>\n\n          {/* Player Name Input */}\n          <motion.div variants={itemVariants} className=\"mb-8\">\n            <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n              Oyuncu Adınız\n            </label>\n            <input\n              type=\"text\"\n              value={playerName}\n              onChange={(e) => setPlayerName(e.target.value)}\n              placeholder=\"Adınızı girin...\"\n              maxLength={20}\n              className=\"w-full px-4 py-3 rounded-xl bg-white/10 border border-white/20 text-white placeholder-gray-400 focus:outline-none focus:border-red-500 focus:ring-2 focus:ring-red-500/20\"\n            />\n          </motion.div>\n\n          {/* Game Mode Selection */}\n          <motion.div variants={itemVariants} className=\"mb-8\">\n            <h3 className=\"text-xl font-bold text-white mb-4\">Oyun Modunu Seçin</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              \n              {/* Sequential Mode */}\n              <button\n                onClick={() => setSelectedMode('sequential')}\n                className={`glass-card rounded-2xl p-6 text-left transition-all ${\n                  selectedMode === 'sequential' \n                    ? 'ring-2 ring-red-500 bg-red-500/20' \n                    : 'hover:scale-105'\n                }`}\n              >\n                <div className=\"text-4xl mb-3\">⚡</div>\n                <h4 className=\"text-xl font-bold text-white mb-2\">Sırayla Modu</h4>\n                <p className=\"text-gray-300 text-sm mb-3\">\n                  Ortak bir panelde sırayla tahmin yapın. Her oyuncu bir satır tamamladıktan \n                  sonra sıra diğer oyuncuya geçer.\n                </p>\n                <div className=\"flex items-center text-xs text-gray-400\">\n                  <span className=\"bg-blue-500/20 px-2 py-1 rounded\">Kooperatif</span>\n                  <span className=\"ml-2\">• Sınırsız satır</span>\n                </div>\n              </button>\n\n              {/* Duel Mode */}\n              <button\n                onClick={() => setSelectedMode('duel')}\n                className={`glass-card rounded-2xl p-6 text-left transition-all ${\n                  selectedMode === 'duel' \n                    ? 'ring-2 ring-red-500 bg-red-500/20' \n                    : 'hover:scale-105'\n                }`}\n              >\n                <div className=\"text-4xl mb-3\">🏆</div>\n                <h4 className=\"text-xl font-bold text-white mb-2\">Düello Modu</h4>\n                <p className=\"text-gray-300 text-sm mb-3\">\n                  Ayrı panellerde farklı kelimelerle yarışın. Kim önce doğru \n                  kelimeyi bulursa kazanır!\n                </p>\n                <div className=\"flex items-center text-xs text-gray-400\">\n                  <span className=\"bg-red-500/20 px-2 py-1 rounded\">Yarışma</span>\n                  <span className=\"ml-2\">• 6 deneme hakkı</span>\n                </div>\n              </button>\n            </div>\n          </motion.div>\n\n          {/* Error Display */}\n          {gameState.error && (\n            <motion.div\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              className=\"mb-6 p-4 bg-red-500/20 border border-red-500/30 rounded-xl text-red-300\"\n            >\n              {gameState.error}\n            </motion.div>\n          )}\n\n          {/* Create Button */}\n          <motion.div variants={itemVariants}>\n            <button\n              onClick={handleCreateRoom}\n              disabled={!selectedMode || !playerName.trim() || isCreating}\n              className=\"w-full turkish-red rounded-xl py-4 text-white font-bold text-lg disabled:opacity-50 disabled:cursor-not-allowed hover:scale-105 transition-transform\"\n            >\n              {isCreating ? (\n                <div className=\"flex items-center justify-center\">\n                  <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2\"></div>\n                  Oda Oluşturuluyor...\n                </div>\n              ) : (\n                'Oda Oluştur'\n              )}\n            </button>\n          </motion.div>\n        </div>\n      </motion.div>\n    </div>\n  );\n}\n","size_bytes":6062},"client/src/components/WordleDuo/LetterGrid.tsx":{"content":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { LetterStatus } from '../../types/game';\n\ninterface LetterGridProps {\n  letters: string[];\n  statuses: LetterStatus[];\n  animate?: boolean;\n}\n\nexport function LetterGrid({ letters, statuses, animate = false }: LetterGridProps) {\n  return (\n    <div className=\"flex justify-center space-x-2\">\n      {letters.map((letter, index) => (\n        <motion.div\n          key={index}\n          initial={animate ? { rotateX: 0 } : false}\n          animate={animate ? { rotateX: [0, 90, 0] } : false}\n          transition={animate ? { \n            duration: 0.6, \n            delay: index * 0.1,\n            ease: \"easeInOut\"\n          } : undefined}\n          className={`\n            letter-cell w-14 h-14 border-2 rounded-lg flex items-center justify-center\n            text-2xl font-bold transition-all duration-200\n            ${statuses[index] === 'correct' ? 'correct' : ''}\n            ${statuses[index] === 'present' ? 'present' : ''}\n            ${statuses[index] === 'absent' ? 'absent' : ''}\n            ${statuses[index] === 'empty' ? 'empty' : ''}\n          `}\n          style={{\n            transformStyle: 'preserve-3d',\n          }}\n        >\n          <motion.span\n            initial={animate ? { opacity: 1 } : false}\n            animate={animate ? { \n              opacity: [1, 0, 1],\n            } : false}\n            transition={animate ? { \n              duration: 0.6, \n              delay: index * 0.1,\n              times: [0, 0.5, 1]\n            } : undefined}\n          >\n            {letter === ' ' ? '' : letter}\n          </motion.span>\n        </motion.div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":1683},"client/src/components/WordleDuo/MainMenu.tsx":{"content":"import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { GameModeSelector } from './GameModeSelector';\nimport { RoomManager } from './RoomManager';\n\ntype MenuState = 'main' | 'create' | 'join';\n\nexport function MainMenu() {\n  const [menuState, setMenuState] = useState<MenuState>('main');\n\n  const containerVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.6,\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: { opacity: 1, y: 0 }\n  };\n\n  if (menuState === 'create') {\n    return <GameModeSelector onBack={() => setMenuState('main')} />;\n  }\n\n  if (menuState === 'join') {\n    return <RoomManager onBack={() => setMenuState('main')} />;\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4\">\n      <motion.div\n        variants={containerVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n        className=\"text-center\"\n      >\n        {/* Logo and Title */}\n        <motion.div variants={itemVariants} className=\"mb-12\">\n          <div className=\"text-8xl mb-4\">🇹🇷</div>\n          <h1 className=\"text-6xl font-bold bg-gradient-to-r from-red-500 to-white bg-clip-text text-transparent mb-4\">\n            WORDLE DUO\n          </h1>\n          <p className=\"text-xl text-gray-300\">\n            Arkadaşlarınızla Türkçe kelime tahmin oyunu\n          </p>\n        </motion.div>\n\n        {/* Menu Buttons */}\n        <motion.div variants={itemVariants} className=\"space-y-4 max-w-md mx-auto\">\n          <button\n            onClick={() => setMenuState('create')}\n            className=\"w-full glass-card rounded-2xl p-6 text-left hover:scale-105 transition-transform group\"\n          >\n            <div className=\"flex items-center\">\n              <div className=\"text-4xl mr-4\">🎮</div>\n              <div>\n                <h3 className=\"text-xl font-bold text-white\">Oda Oluştur</h3>\n                <p className=\"text-gray-300\">Yeni bir oyun odası aç</p>\n              </div>\n            </div>\n          </button>\n\n          <button\n            onClick={() => setMenuState('join')}\n            className=\"w-full glass-card rounded-2xl p-6 text-left hover:scale-105 transition-transform group\"\n          >\n            <div className=\"flex items-center\">\n              <div className=\"text-4xl mr-4\">🚪</div>\n              <div>\n                <h3 className=\"text-xl font-bold text-white\">Odaya Katıl</h3>\n                <p className=\"text-gray-300\">Mevcut bir odaya katıl</p>\n              </div>\n            </div>\n          </button>\n\n          <div className=\"glass-card rounded-2xl p-6\">\n            <div className=\"flex items-center justify-center\">\n              <div className=\"text-4xl mr-4\">ℹ️</div>\n              <div className=\"text-center\">\n                <h3 className=\"text-xl font-bold text-white mb-2\">Nasıl Oynanır?</h3>\n                <p className=\"text-sm text-gray-300\">\n                  5 harfli Türkçe kelimeleri tahmin edin. Yeşil = doğru harf ve konum, \n                  Sarı = doğru harf yanlış konum, Gri = yanlış harf.\n                </p>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* Footer */}\n        <motion.div variants={itemVariants} className=\"mt-12 text-gray-400 text-sm\">\n          <p>Made with ❤️ for Turkish word game lovers</p>\n        </motion.div>\n      </motion.div>\n    </div>\n  );\n}\n","size_bytes":3546},"client/src/components/WordleDuo/PlayerIndicator.tsx":{"content":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { useWordleDuo } from '../../hooks/useWordleDuo';\n\nexport function PlayerIndicator() {\n  const { gameState } = useWordleDuo();\n\n  if (!gameState.roomData) return null;\n\n  return (\n    <div className=\"flex items-center space-x-2\">\n      {gameState.roomData.players.map((player: any, index: number) => (\n        <motion.div\n          key={player.id}\n          initial={{ opacity: 0, scale: 0 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: index * 0.1 }}\n          className={`\n            flex items-center space-x-2 px-3 py-2 rounded-lg glass-card\n            ${gameState.roomData!.mode === 'sequential' && \n              gameState.roomData!.currentTurn === index ? 'ring-2 ring-red-500 glow-animation' : ''}\n          `}\n        >\n          <span className=\"text-xl\">{player.avatar}</span>\n          <div>\n            <div className=\"text-sm font-medium text-white\">{player.name}</div>\n            <div className=\"text-xs text-gray-400\">\n              {player.status === 'online' ? (\n                <span className=\"flex items-center\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full mr-1\"></div>\n                  Çevrimiçi\n                </span>\n              ) : (\n                <span className=\"flex items-center\">\n                  <div className=\"w-2 h-2 bg-gray-500 rounded-full mr-1\"></div>\n                  Çevrimdışı\n                </span>\n              )}\n            </div>\n          </div>\n        </motion.div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":1591},"client/src/components/WordleDuo/RoomManager.tsx":{"content":"import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { useWordleDuo } from '../../hooks/useWordleDuo';\n\ninterface RoomManagerProps {\n  onBack: () => void;\n}\n\nexport function RoomManager({ onBack }: RoomManagerProps) {\n  const [playerName, setPlayerName] = useState('');\n  const [roomCode, setRoomCode] = useState('');\n  const [isJoining, setIsJoining] = useState(false);\n  const { joinRoom, gameState } = useWordleDuo();\n\n  const handleJoinRoom = async () => {\n    if (!roomCode.trim() || !playerName.trim()) return;\n\n    setIsJoining(true);\n    try {\n      await joinRoom(roomCode.trim().toUpperCase(), playerName.trim());\n    } catch (error) {\n      console.error('Error joining room:', error);\n    } finally {\n      setIsJoining(false);\n    }\n  };\n\n  const handleRoomCodeChange = (value: string) => {\n    // Only allow alphanumeric characters and limit to 6 characters\n    const cleaned = value.replace(/[^A-Z0-9]/g, '').substring(0, 6);\n    setRoomCode(cleaned);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4\">\n      <motion.div\n        initial={{ opacity: 0, scale: 0.95 }}\n        animate={{ opacity: 1, scale: 1 }}\n        transition={{ duration: 0.3 }}\n        className=\"w-full max-w-md\"\n      >\n        <div className=\"glass-card rounded-3xl p-8\">\n          <div className=\"flex items-center mb-8\">\n            <button\n              onClick={onBack}\n              className=\"mr-4 p-2 rounded-lg hover:bg-white/10 transition-colors\"\n            >\n              <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n              </svg>\n            </button>\n            <h2 className=\"text-3xl font-bold text-white\">Odaya Katıl</h2>\n          </div>\n\n          {/* Player Name Input */}\n          <div className=\"mb-6\">\n            <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n              Oyuncu Adınız\n            </label>\n            <input\n              type=\"text\"\n              value={playerName}\n              onChange={(e) => setPlayerName(e.target.value)}\n              placeholder=\"Adınızı girin...\"\n              maxLength={20}\n              className=\"w-full px-4 py-3 rounded-xl bg-white/10 border border-white/20 text-white placeholder-gray-400 focus:outline-none focus:border-red-500 focus:ring-2 focus:ring-red-500/20\"\n            />\n          </div>\n\n          {/* Room Code Input */}\n          <div className=\"mb-8\">\n            <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n              Oda Kodu\n            </label>\n            <input\n              type=\"text\"\n              value={roomCode}\n              onChange={(e) => handleRoomCodeChange(e.target.value.toUpperCase())}\n              placeholder=\"6 haneli oda kodu...\"\n              maxLength={6}\n              className=\"w-full px-4 py-3 rounded-xl bg-white/10 border border-white/20 text-white placeholder-gray-400 focus:outline-none focus:border-red-500 focus:ring-2 focus:ring-red-500/20 text-center text-2xl font-mono tracking-widest\"\n            />\n            <p className=\"text-xs text-gray-400 mt-2 text-center\">\n              Oda kodunu arkadaşınızdan alın\n            </p>\n          </div>\n\n          {/* Error Display */}\n          {gameState.error && (\n            <motion.div\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              className=\"mb-6 p-4 bg-red-500/20 border border-red-500/30 rounded-xl text-red-300\"\n            >\n              {gameState.error}\n            </motion.div>\n          )}\n\n          {/* Join Button */}\n          <button\n            onClick={handleJoinRoom}\n            disabled={!roomCode.trim() || !playerName.trim() || roomCode.length !== 6 || isJoining}\n            className=\"w-full turkish-red rounded-xl py-4 text-white font-bold text-lg disabled:opacity-50 disabled:cursor-not-allowed hover:scale-105 transition-transform\"\n          >\n            {isJoining ? (\n              <div className=\"flex items-center justify-center\">\n                <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2\"></div>\n                Odaya Katılınıyor...\n              </div>\n            ) : (\n              'Odaya Katıl'\n            )}\n          </button>\n\n          {/* Info */}\n          <div className=\"mt-6 text-center text-sm text-gray-400\">\n            <p>\n              Oda kodu arkadaşınızın size verdiği 6 haneli koddur.\n              <br />\n              Örnek: ABC123\n            </p>\n          </div>\n        </div>\n      </motion.div>\n    </div>\n  );\n}\n","size_bytes":4732},"client/src/components/WordleDuo/SequentialMode.tsx":{"content":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { useWordleDuo } from '../../hooks/useWordleDuo';\nimport { LetterGrid } from './LetterGrid';\n\nexport function SequentialMode() {\n  const { gameState } = useWordleDuo();\n\n  if (!gameState.roomData) return null;\n\n  // Create grid from game history and current input\n  const gridRows = [...gameState.roomData.gameHistory];\n  \n  // Add current input row if it's the current player's turn\n  if (gameState.isMyTurn && gameState.currentInput) {\n    const currentRow = {\n      rowIndex: gridRows.length,\n      playerId: gameState.playerData?.id || '',\n      playerName: gameState.playerData?.name || '',\n      playerAvatar: gameState.playerData?.avatar || '👤',\n      guess: gameState.currentInput.padEnd(5, ' '),\n      result: Array(5).fill('empty'),\n      timestamp: Date.now()\n    };\n    gridRows.push(currentRow);\n  }\n\n  return (\n    <div className=\"flex-1 flex items-center justify-center p-4\">\n      <motion.div\n        initial={{ opacity: 0, scale: 0.95 }}\n        animate={{ opacity: 1, scale: 1 }}\n        className=\"w-full max-w-2xl\"\n      >\n        {/* Turn Indicator */}\n        <div className=\"mb-6 text-center\">\n          <div className=\"glass-card rounded-2xl p-4 mb-4\">\n            <h3 className=\"text-lg font-bold text-white mb-2\">Sırayla Modu</h3>\n            <div className=\"flex items-center justify-center space-x-4\">\n              {gameState.roomData.players.map((player: any, index: number) => (\n                <div\n                  key={player.id}\n                  className={`flex items-center space-x-2 px-3 py-2 rounded-lg transition-all ${\n                    gameState.roomData!.currentTurn === index\n                      ? 'bg-red-500/30 ring-2 ring-red-500'\n                      : 'bg-white/10'\n                  }`}\n                >\n                  <span className=\"text-2xl\">{player.avatar}</span>\n                  <span className=\"text-white font-medium\">{player.name}</span>\n                  {gameState.roomData!.currentTurn === index && (\n                    <div className=\"w-2 h-2 bg-red-500 rounded-full animate-pulse\"></div>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {!gameState.isMyTurn && (\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              className=\"text-gray-300\"\n            >\n              {gameState.roomData.players[gameState.roomData.currentTurn]?.name} oynuyor...\n            </motion.div>\n          )}\n        </div>\n\n        {/* Game Grid */}\n        <div className=\"space-y-2\">\n          {gridRows.map((row, index) => (\n            <motion.div\n              key={`${row.playerId}-${row.rowIndex}`}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: index * 0.1 }}\n              className=\"flex items-center space-x-4\"\n            >\n              {/* Player Avatar */}\n              <div className=\"flex items-center space-x-2 w-32\">\n                <span className=\"text-2xl\">{row.playerAvatar}</span>\n                <span className=\"text-sm text-gray-300 truncate\">{row.playerName}</span>\n              </div>\n\n              {/* Letter Row */}\n              <LetterGrid\n                letters={row.guess.split('')}\n                statuses={row.result}\n                animate={row.result.some((r: any) => r !== 'empty')}\n              />\n            </motion.div>\n          ))}\n\n          {/* Empty row for current turn if no input */}\n          {gameState.isMyTurn && !gameState.currentInput && (\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              className=\"flex items-center space-x-4\"\n            >\n              <div className=\"flex items-center space-x-2 w-32\">\n                <span className=\"text-2xl\">{gameState.playerData?.avatar}</span>\n                <span className=\"text-sm text-gray-300 truncate\">{gameState.playerData?.name}</span>\n              </div>\n              <LetterGrid\n                letters={['', '', '', '', '']}\n                statuses={['empty', 'empty', 'empty', 'empty', 'empty']}\n                animate={false}\n              />\n            </motion.div>\n          )}\n        </div>\n\n        {/* Instructions */}\n        <div className=\"mt-6 text-center text-gray-400 text-sm\">\n          <p>Her oyuncu sırayla 5 harfli Türkçe kelime tahmin eder</p>\n        </div>\n      </motion.div>\n    </div>\n  );\n}\n","size_bytes":4565},"client/src/components/WordleDuo/TurkishKeyboard.tsx":{"content":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { LetterStatus } from '../../types/game';\n\ninterface TurkishKeyboardProps {\n  onKeyPress: (key: string) => void;\n  keyboardStatus: Record<string, LetterStatus>;\n  disabled?: boolean;\n}\n\nexport function TurkishKeyboard({ onKeyPress, keyboardStatus, disabled = false }: TurkishKeyboardProps) {\n  const keyboard = [\n    ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P', 'Ğ', 'Ü'],\n    ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'Ş', 'İ'],\n    ['Z', 'X', 'C', 'V', 'B', 'N', 'M', 'Ö', 'Ç']\n  ];\n\n  const getKeyStatus = (key: string): LetterStatus => {\n    return keyboardStatus[key] || 'empty';\n  };\n\n  const containerVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.3,\n        staggerChildren: 0.02\n      }\n    }\n  };\n\n  const keyVariants = {\n    hidden: { opacity: 0, scale: 0.8 },\n    visible: { opacity: 1, scale: 1 }\n  };\n\n  return (\n    <motion.div\n      variants={containerVariants}\n      initial=\"hidden\"\n      animate=\"visible\"\n      className={`space-y-2 ${disabled ? 'opacity-50 pointer-events-none' : ''}`}\n    >\n      {keyboard.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"flex justify-center space-x-1\">\n          {rowIndex === 2 && (\n            <motion.button\n              variants={keyVariants}\n              onClick={() => onKeyPress('ENTER')}\n              disabled={disabled}\n              className=\"keyboard-key px-4 py-3 rounded-lg text-white font-bold text-sm glass-button min-w-[80px]\"\n            >\n              ENTER\n            </motion.button>\n          )}\n          \n          {row.map((key) => (\n            <motion.button\n              key={key}\n              variants={keyVariants}\n              onClick={() => onKeyPress(key)}\n              disabled={disabled}\n              className={`\n                keyboard-key w-10 h-12 rounded-lg text-white font-bold text-sm\n                transition-all duration-200 border border-white/20\n                ${getKeyStatus(key) === 'correct' ? 'correct' : ''}\n                ${getKeyStatus(key) === 'present' ? 'present' : ''}\n                ${getKeyStatus(key) === 'absent' ? 'absent' : ''}\n                ${getKeyStatus(key) === 'empty' ? 'glass-button' : ''}\n              `}\n            >\n              {key}\n            </motion.button>\n          ))}\n          \n          {rowIndex === 2 && (\n            <motion.button\n              variants={keyVariants}\n              onClick={() => onKeyPress('BACKSPACE')}\n              disabled={disabled}\n              className=\"keyboard-key px-4 py-3 rounded-lg text-white font-bold text-sm glass-button min-w-[80px]\"\n            >\n              ⌫\n            </motion.button>\n          )}\n        </div>\n      ))}\n      \n      {disabled && (\n        <div className=\"text-center text-gray-400 text-sm mt-4\">\n          Sıranızı bekleyin...\n        </div>\n      )}\n    </motion.div>\n  );\n}\n","size_bytes":3004},"client/src/components/WordleDuo/WinScreen.tsx":{"content":"import React, { useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { useWordleDuo } from '../../hooks/useWordleDuo';\n\nexport function WinScreen() {\n  const { gameState, resetGame } = useWordleDuo();\n\n  // Trigger confetti effect\n  useEffect(() => {\n    const createConfetti = () => {\n      const confettiContainer = document.createElement('div');\n      confettiContainer.className = 'fixed inset-0 pointer-events-none z-50';\n      document.body.appendChild(confettiContainer);\n\n      for (let i = 0; i < 50; i++) {\n        const confetti = document.createElement('div');\n        confetti.className = 'absolute w-2 h-2 confetti';\n        confetti.style.left = Math.random() * 100 + '%';\n        confetti.style.backgroundColor = ['#ef4444', '#f59e0b', '#10b981', '#06b6d4'][Math.floor(Math.random() * 4)];\n        confetti.style.animationDelay = Math.random() * 3 + 's';\n        confettiContainer.appendChild(confetti);\n      }\n\n      setTimeout(() => {\n        document.body.removeChild(confettiContainer);\n      }, 3000);\n    };\n\n    createConfetti();\n  }, []);\n\n  if (!gameState.roomData) return null;\n\n  // Determine winner and current player\n  const lastGuess = gameState.roomData.gameHistory[gameState.roomData.gameHistory.length - 1];\n  const isWinner = lastGuess?.result.every((status: any) => status === 'correct');\n  const winner = isWinner ? lastGuess : null;\n  \n  // Get current player from localStorage or first available player\n  const storedPlayerId = localStorage.getItem('wordle-duo-player-id');\n  const currentPlayer = gameState.roomData.players.find(p => p.id === storedPlayerId);\n  const isCurrentPlayerWinner = winner && winner.playerId === storedPlayerId;\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.8 }}\n      animate={{ opacity: 1, scale: 1 }}\n      transition={{ duration: 0.5 }}\n      className=\"flex-1 flex items-center justify-center p-4\"\n    >\n      <div className=\"text-center max-w-md\">\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2 }}\n          className=\"mb-8\"\n        >\n          <div className=\"text-8xl mb-4\">\n            {isCurrentPlayerWinner ? '🎉' : winner ? '😔' : '🤝'}\n          </div>\n          <h2 className=\"text-4xl font-bold text-white mb-4\">\n            {isCurrentPlayerWinner ? 'Tebrikler!' : winner ? 'Kaybettiniz!' : 'Oyun Bitti'}\n          </h2>\n          {winner && (\n            <p className=\"text-xl text-gray-300 mb-4\">\n              <span className=\"text-2xl\">{winner.playerAvatar}</span> {winner.playerName} \n              {isCurrentPlayerWinner ? ' (Sen) kazandın!' : ' kazandı!'}\n            </p>\n          )}\n        </motion.div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.4 }}\n          className=\"glass-card rounded-2xl p-6 mb-8\"\n        >\n          <h3 className=\"text-xl font-bold text-white mb-4\">Oyun Özeti</h3>\n          <div className=\"space-y-2 text-sm\">\n            <div className=\"flex justify-between text-gray-300\">\n              <span>Mod:</span>\n              <span className=\"capitalize\">{gameState.roomData.mode === 'sequential' ? 'Sırayla' : 'Düello'}</span>\n            </div>\n            <div className=\"flex justify-between text-gray-300\">\n              <span>Toplam Tahmin:</span>\n              <span>{gameState.roomData.gameHistory.length}</span>\n            </div>\n            <div className=\"flex justify-between text-gray-300\">\n              <span>Kelime:</span>\n              <span className=\"font-mono uppercase\">{gameState.roomData.word}</span>\n            </div>\n          </div>\n        </motion.div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.6 }}\n          className=\"space-y-4\"\n        >\n          <button\n            onClick={resetGame}\n            className=\"w-full turkish-red rounded-xl py-4 text-white font-bold text-lg hover:scale-105 transition-transform\"\n          >\n            Yeni Oyun\n          </button>\n          \n          <button\n            onClick={() => {\n              if (navigator.share) {\n                navigator.share({\n                  title: 'Wordle Duo',\n                  text: `${winner ? winner.playerName + ' kazandı!' : 'Oyun bitti!'} Wordle Duo'da benimle oyna!`,\n                  url: window.location.href\n                });\n              } else {\n                navigator.clipboard.writeText(window.location.href);\n                alert('Link kopyalandı!');\n              }\n            }}\n            className=\"w-full glass-button rounded-xl py-3 text-white font-medium hover:scale-105 transition-transform\"\n          >\n            Sonucu Paylaş\n          </button>\n        </motion.div>\n      </div>\n    </motion.div>\n  );\n}\n","size_bytes":4901},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":2001},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4419},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1598},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1140},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1902},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: cn(\n          \"relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md\",\n          props.mode === \"range\"\n            ? \"[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md\"\n            : \"[&:has([aria-selected])]:rounded-md\"\n        ),\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-8 w-8 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_start: \"day-range-start\",\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2935},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1828},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1012},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4873},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7224},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3849},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7480},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-[0.8rem] text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-[0.8rem] font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4132},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1198},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Minus } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-9 w-9 items-center justify-center border-y border-r border-input text-sm shadow-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-1 ring-ring\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Minus />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2143},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":768},"client/src/components/ui/interface.tsx":{"content":"import { useEffect } from \"react\";\nimport { useGame } from \"@/lib/stores/useGame\";\nimport { useAudio } from \"@/lib/stores/useAudio\";\nimport { Button } from \"./button\";\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"./card\";\nimport { VolumeX, Volume2, RotateCw, Trophy } from \"lucide-react\";\n\nexport function Interface() {\n  const restart = useGame((state) => state.restart);\n  const phase = useGame((state) => state.phase);\n  const { isMuted, toggleMute } = useAudio();\n\n  // Handle clicks on the interface in the ready phase to start the game\n  useEffect(() => {\n    if (phase === \"ready\") {\n      const handleClick = () => {\n        const activeElement = document.activeElement;\n        if (activeElement && 'blur' in activeElement) {\n          (activeElement as HTMLElement).blur();\n        }\n        const event = new KeyboardEvent(\"keydown\", { code: \"Space\" });\n        window.dispatchEvent(event);\n      };\n\n      window.addEventListener(\"click\", handleClick);\n      return () => window.removeEventListener(\"click\", handleClick);\n    }\n  }, [phase]);\n\n  return (\n    <>\n      {/* Top-right corner UI controls */}\n      <div className=\"fixed top-4 right-4 flex gap-2 z-10\">\n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={toggleMute}\n          title={isMuted ? \"Unmute\" : \"Mute\"}\n        >\n          {isMuted ? <VolumeX size={18} /> : <Volume2 size={18} />}\n        </Button>\n        \n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={restart}\n          title=\"Restart Game\"\n        >\n          <RotateCw size={18} />\n        </Button>\n      </div>\n      \n      {/* Game completion overlay */}\n      {phase === \"ended\" && (\n        <div className=\"fixed inset-0 flex items-center justify-center z-20 bg-black/30\">\n          <Card className=\"w-full max-w-md mx-4 shadow-lg\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-center gap-2\">\n                <Trophy className=\"text-yellow-500\" />\n                Level Complete!\n              </CardTitle>\n            </CardHeader>\n            \n            <CardContent>\n              <p className=\"text-center text-muted-foreground\">\n                Congratulations! You successfully navigated the course.\n              </p>\n            </CardContent>\n            \n            <CardFooter className=\"flex justify-center\">\n              <Button onClick={restart} className=\"w-full\">\n                Play Again\n              </Button>\n            </CardFooter>\n          </Card>\n        </div>\n      )}\n      \n      {/* Instructions panel */}\n      <div className=\"fixed bottom-4 left-4 z-10\">\n        <Card className=\"w-auto max-w-xs bg-background/80 backdrop-blur-sm\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-medium mb-2\">Controls:</h3>\n            <ul className=\"text-sm space-y-1 text-muted-foreground\">\n              <li>WASD or Arrow Keys: Move the ball</li>\n              <li>Space: Jump</li>\n              <li>R: Restart game</li>\n              <li>M: Toggle sound</li>\n            </ul>\n          </CardContent>\n        </Card>\n      </div>\n    </>\n  );\n}\n","size_bytes":3180},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-9 items-center space-x-1 rounded-md border bg-background p-1 shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8522},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5124},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationLink,\n  PaginationItem,\n  PaginationPrevious,\n  PaginationNext,\n  PaginationEllipsis,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverAnchor = PopoverPrimitive.Anchor\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n","size_bytes":1292},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-2 w-full overflow-hidden rounded-full bg-primary/20\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":792},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-3.5 w-3.5 fill-primary\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1410},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5639},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n      {children}\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4280},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { VariantProps, cva } from \"class-variance-authority\";\nimport { PanelLeft } from \"lucide-react\";\n\nimport { useIsMobile } from \"@/hooks/use-is-mobile\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\";\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\nconst SIDEBAR_WIDTH = \"16rem\";\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\";\nconst SIDEBAR_WIDTH_ICON = \"3rem\";\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\";\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\";\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  openMobile: boolean;\n  setOpenMobile: (open: boolean) => void;\n  isMobile: boolean;\n  toggleSidebar: () => void;\n};\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null);\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext);\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\");\n  }\n\n  return context;\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean;\n    open?: boolean;\n    onOpenChange?: (open: boolean) => void;\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const isMobile = useIsMobile();\n    const [openMobile, setOpenMobile] = React.useState(false);\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen);\n    const open = openProp ?? _open;\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value;\n        if (setOpenProp) {\n          setOpenProp(openState);\n        } else {\n          _setOpen(openState);\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;\n      },\n      [setOpenProp, open],\n    );\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open);\n    }, [isMobile, setOpen, setOpenMobile]);\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault();\n          toggleSidebar();\n        }\n      };\n\n      window.addEventListener(\"keydown\", handleKeyDown);\n      return () => window.removeEventListener(\"keydown\", handleKeyDown);\n    }, [toggleSidebar]);\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\";\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      ],\n    );\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className,\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    );\n  },\n);\nSidebarProvider.displayName = \"SidebarProvider\";\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\";\n    variant?: \"sidebar\" | \"floating\" | \"inset\";\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\";\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar();\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className,\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      );\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      );\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\",\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className,\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\nSidebar.displayName = \"Sidebar\";\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event);\n        toggleSidebar();\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  );\n});\nSidebarTrigger.displayName = \"SidebarTrigger\";\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarRail.displayName = \"SidebarRail\";\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInset.displayName = \"SidebarInset\";\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInput.displayName = \"SidebarInput\";\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarHeader.displayName = \"SidebarHeader\";\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarFooter.displayName = \"SidebarFooter\";\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  );\n});\nSidebarSeparator.displayName = \"SidebarSeparator\";\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarContent.displayName = \"SidebarContent\";\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarGroup.displayName = \"SidebarGroup\";\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\";\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupAction.displayName = \"SidebarGroupAction\";\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n));\nSidebarGroupContent.displayName = \"SidebarGroupContent\";\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n));\nSidebarMenu.displayName = \"SidebarMenu\";\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n));\nSidebarMenuItem.displayName = \"SidebarMenuItem\";\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    isActive?: boolean;\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>;\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const Comp = asChild ? Slot : \"button\";\n    const { isMobile, state } = useSidebar();\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    );\n\n    if (!tooltip) {\n      return button;\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      };\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    );\n  },\n);\nSidebarMenuButton.displayName = \"SidebarMenuButton\";\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    showOnHover?: boolean;\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuAction.displayName = \"SidebarMenuAction\";\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className,\n    )}\n    {...props}\n  />\n));\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\";\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean;\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`;\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  );\n});\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\";\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className,\n    )}\n    {...props}\n  />\n));\nSidebarMenuSub.displayName = \"SidebarMenuSub\";\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />);\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\";\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean;\n    size?: \"sm\" | \"md\";\n    isActive?: boolean;\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\";\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n};\n","size_bytes":23790},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-primary/10\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":266},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1037},"client/src/components/ui/sonner.tsx":{"content":"\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n","size_bytes":894},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1148},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\n      \"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2859},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1877},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":649},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1486},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </TooltipPrimitive.Portal>\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1217},"client/src/lib/stores/useAudio.tsx":{"content":"import { create } from \"zustand\";\n\ninterface AudioState {\n  backgroundMusic: HTMLAudioElement | null;\n  hitSound: HTMLAudioElement | null;\n  successSound: HTMLAudioElement | null;\n  isMuted: boolean;\n  \n  // Setter functions\n  setBackgroundMusic: (music: HTMLAudioElement) => void;\n  setHitSound: (sound: HTMLAudioElement) => void;\n  setSuccessSound: (sound: HTMLAudioElement) => void;\n  \n  // Control functions\n  toggleMute: () => void;\n  playHit: () => void;\n  playSuccess: () => void;\n}\n\nexport const useAudio = create<AudioState>((set, get) => ({\n  backgroundMusic: null,\n  hitSound: null,\n  successSound: null,\n  isMuted: true, // Start muted by default\n  \n  setBackgroundMusic: (music) => set({ backgroundMusic: music }),\n  setHitSound: (sound) => set({ hitSound: sound }),\n  setSuccessSound: (sound) => set({ successSound: sound }),\n  \n  toggleMute: () => {\n    const { isMuted } = get();\n    const newMutedState = !isMuted;\n    \n    // Just update the muted state\n    set({ isMuted: newMutedState });\n    \n    // Log the change\n    console.log(`Sound ${newMutedState ? 'muted' : 'unmuted'}`);\n  },\n  \n  playHit: () => {\n    const { hitSound, isMuted } = get();\n    if (hitSound) {\n      // If sound is muted, don't play anything\n      if (isMuted) {\n        console.log(\"Hit sound skipped (muted)\");\n        return;\n      }\n      \n      // Clone the sound to allow overlapping playback\n      const soundClone = hitSound.cloneNode() as HTMLAudioElement;\n      soundClone.volume = 0.3;\n      soundClone.play().catch(error => {\n        console.log(\"Hit sound play prevented:\", error);\n      });\n    }\n  },\n  \n  playSuccess: () => {\n    const { successSound, isMuted } = get();\n    if (successSound) {\n      // If sound is muted, don't play anything\n      if (isMuted) {\n        console.log(\"Success sound skipped (muted)\");\n        return;\n      }\n      \n      successSound.currentTime = 0;\n      successSound.play().catch(error => {\n        console.log(\"Success sound play prevented:\", error);\n      });\n    }\n  }\n}));\n","size_bytes":2025},"client/src/lib/stores/useGame.tsx":{"content":"import { create } from \"zustand\";\nimport { subscribeWithSelector } from \"zustand/middleware\";\n\nexport type GamePhase = \"ready\" | \"playing\" | \"ended\";\n\ninterface GameState {\n  phase: GamePhase;\n  \n  // Actions\n  start: () => void;\n  restart: () => void;\n  end: () => void;\n}\n\nexport const useGame = create<GameState>()(\n  subscribeWithSelector((set) => ({\n    phase: \"ready\",\n    \n    start: () => {\n      set((state) => {\n        // Only transition from ready to playing\n        if (state.phase === \"ready\") {\n          return { phase: \"playing\" };\n        }\n        return {};\n      });\n    },\n    \n    restart: () => {\n      set(() => ({ phase: \"ready\" }));\n    },\n    \n    end: () => {\n      set((state) => {\n        // Only transition from playing to ended\n        if (state.phase === \"playing\") {\n          return { phase: \"ended\" };\n        }\n        return {};\n      });\n    }\n  }))\n);\n","size_bytes":893}}}